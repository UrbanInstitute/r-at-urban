{
  "hash": "37704601dd4759ada99f55c038101700",
  "result": {
    "markdown": "---\noutput: \n  html_document:\n    includes:\n      in_header: analytics.html  \t\n    css: styles.css\n    code_folding: show\n    toc: TRUE\n    toc_float: TRUE\n    pandoc_args:\n      \"--tab-stop=2\"\n---\n\n\n\n<link rel=\"stylesheet\" href=\"//fonts.googleapis.com/css?family=Lato\" />\n\n<div id=\"header\">\n<img src=\"intro-to-r/images/urban-institute-logo.png\" width=\"350\">\n</div>\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Introduction\n\nThis guide outlines some useful workflows for pulling data sets commonly used by the Urban Institute. \n\n## `library(tidycensus)`\n\n`library(tidycensus)` by Kyle Walker ([complete intro here](https://walkerke.github.io/tidycensus/)) is the best tool for accessing some Census data sets in R from the Census Bureau API. The package returns tidy data frames and can easily pull shapefiles by adding `geometry = TRUE`.  \n\nYou will need to [apply for a Census API key](https://api.census.gov/data/key_signup.html) and [add it to your R session](https://walkerke.github.io/tidycensus/articles/basic-usage.html). Don't add your API key to your script and don't add it to a GitHub repository! \n\nHere is a simple example for one state with shapefiles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(tidycensus)\n\n# pull median household income and shapefiles for Census tracts in Alabama\nget_acs(geography = \"tract\", \n\t\t\t\tvariables = \"B19013_001\", \n\t\t\t\tstate = \"01\",\n\t\t\t\tyear = 2015,\n\t\t\t\tgeometry = TRUE,\n\t\t\t\tprogress = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 1181 features and 5 fields (with 1 geometry empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -88.47323 ymin: 30.22333 xmax: -84.88908 ymax: 35.00803\nGeodetic CRS:  NAD83\nFirst 10 features:\n         GEOID                                          NAME   variable\n1  01003010500     Census Tract 105, Baldwin County, Alabama B19013_001\n2  01003011501  Census Tract 115.01, Baldwin County, Alabama B19013_001\n3  01009050500      Census Tract 505, Blount County, Alabama B19013_001\n4  01015981901 Census Tract 9819.01, Calhoun County, Alabama B19013_001\n5  01025957700     Census Tract 9577, Clarke County, Alabama B19013_001\n6  01025958002  Census Tract 9580.02, Clarke County, Alabama B19013_001\n7  01031011000      Census Tract 110, Coffee County, Alabama B19013_001\n8  01033020500     Census Tract 205, Colbert County, Alabama B19013_001\n9  01037961200      Census Tract 9612, Coosa County, Alabama B19013_001\n10 01039961700  Census Tract 9617, Covington County, Alabama B19013_001\n   estimate   moe                       geometry\n1     41944  8100 MULTIPOLYGON (((-87.80249 3...\n2     41417 14204 MULTIPOLYGON (((-87.71719 3...\n3     40055  8054 MULTIPOLYGON (((-86.75735 3...\n4        NA    NA MULTIPOLYGON (((-86.01323 3...\n5     32708  4806 MULTIPOLYGON (((-88.18049 3...\n6     29048 14759 MULTIPOLYGON (((-87.98623 3...\n7     44732  7640 MULTIPOLYGON (((-85.92018 3...\n8     49052  6543 MULTIPOLYGON (((-87.76733 3...\n9     31957  9954 MULTIPOLYGON (((-86.46069 3...\n10    32697  6021 MULTIPOLYGON (((-86.6998 31...\n```\n:::\n:::\n\n\nSmaller geographies like Census tracts can only be pulled state-by-state. This example demonstrates how to iterate across FIPS codes to pull Census tracts for multiple states. The process is as follows:\n\n1. Pick the variables of interest\n2. Create a vector of state FIPS codes for the states of interest\n3. Create a custom function that works on a single state FIPS code\n4. Iterate the function along the vector of state FIPS codes with `map_df()` from `library(purrr)`\n\nHere is an example that pulls median household income at the Census tract level for multiple states: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# variables of interest\nvars <- c(\n  \"B19013_001\"  # median household income estimate\n)\n\n# states of interest: alabama, alaska, arizona\nstate_fips <- c(\"01\", \"02\", \"04\")\n\t\n# create a custom function that works for one state\nget_income <- function(state_fips) {\n\t\n\tincome_data <- get_acs(geography = \"tract\", \n\t\t\t\t\t\t\t\t\t\t\t\t variables = vars, \n\t\t\t\t\t\t\t\t\t\t\t\t state = state_fips,\n\t\t\t\t\t\t\t\t\t\t\t\t year = 2015)\n\t\n\treturn(income_data)\n\t\n}\n\n# iterate the function\nmap_df(.x = state_fips, # iterate along the vector of state fips codes\n\t\t\t .f = get_income) # apply get_income() to each fips_code  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,874 × 5\n   GEOID       NAME                                      variable estimate   moe\n   <chr>       <chr>                                     <chr>       <dbl> <dbl>\n 1 01001020100 Census Tract 201, Autauga County, Alabama B19013_…    61838 11900\n 2 01001020200 Census Tract 202, Autauga County, Alabama B19013_…    32303 13538\n 3 01001020300 Census Tract 203, Autauga County, Alabama B19013_…    44922  5629\n 4 01001020400 Census Tract 204, Autauga County, Alabama B19013_…    54329  7003\n 5 01001020500 Census Tract 205, Autauga County, Alabama B19013_…    51965  6935\n 6 01001020600 Census Tract 206, Autauga County, Alabama B19013_…    63092  9585\n 7 01001020700 Census Tract 207, Autauga County, Alabama B19013_…    34821  7867\n 8 01001020801 Census Tract 208.01, Autauga County, Ala… B19013_…    73728  2447\n 9 01001020802 Census Tract 208.02, Autauga County, Ala… B19013_…    60063  8602\n10 01001020900 Census Tract 209, Autauga County, Alabama B19013_…    41287  7857\n# … with 2,864 more rows\n```\n:::\n:::\n\n\n`library(tidycensus)` works well with `library(tidyverse)` and enables access to geospatial data, but it is limited to only some Census Bureau data sets. The next package has less functionality but allows for accessing any data available on the Census API. \n\n<br>\n\n## `library(censusapi)`\n\n`library(censusapi)` by Hannah Recht ([complete intro here](https://cran.r-project.org/web/packages/censusapi/vignettes/getting-started.html)) can access any published table that is accessible through the Census Bureau API. A full listing is available [here](https://api.census.gov/data.html).\n\nYou will need to [apply for a Census API key](https://api.census.gov/data/key_signup.html) and [add it to your R session](https://cran.r-project.org/web/packages/censusapi/vignettes/getting-started.html). Don't add your API key to your script and don't add it to a GitHub repository! \n\nHere is a simple example that pulls median household income and its margin of error for Census tracts in Alabama:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(censusapi)\n\nvars <- c(\n  \"B19013_001E\",  # median household income estimate\n  \"B19013_001M\"   # median household income margin of error\n)\n\ngetCensus(name = \"acs/acs5\",\n\t\t\t\t\tvars = vars, \n\t\t\t\t\tregion = \"tract:*\",\n\t\t\t\t\tregionin = \"state:01\",\n\t\t\t\t\tvintage = 2015) %>%\n\tas_tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,181 × 5\n   state county tract  B19013_001E B19013_001M\n   <chr> <chr>  <chr>        <dbl>       <dbl>\n 1 01    103    005109       29644        4098\n 2 01    103    005106       35864        3443\n 3 01    103    005107       66739        5468\n 4 01    103    005108       64632        9804\n 5 01    103    005701       46306        7926\n 6 01    103    005702       47769       12939\n 7 01    105    686800       30662        7299\n 8 01    009    050102       43325        9484\n 9 01    009    050300       37548        9655\n10 01    009    050700       46452        5167\n# … with 1,171 more rows\n```\n:::\n:::\n\n\nSmaller geographies like Census tracts can only be pulled state-by-state. This example demonstrates how to iterate across FIPS codes to pull Census tracts for multiple states. The process is as follows:\n\n1. Pick the variables of interest\n2. Create a vector of state FIPS codes for the states of interest\n3. Create a custom function that works on a single state FIPS code\n4. Iterate the function along the vector of state FIPS codes with `map_df()` from `library(purrr)`\n\nHere is an example that pulls median household income at the Census tract level for multiple states: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# variables of interest\nvars <- c(\n  \"B19013_001E\",  # median household income estimate\n  \"B19013_001M\"   # median household income margin of error\n)\n\n# states of interest: alabama, alaska, arizona\nstate_fips <- c(\"01\", \"02\", \"04\")\n\t\n# create a custom function that works for one state\nget_income <- function(state_fips) {\n\t\n\tincome_data <- getCensus(name = \"acs/acs5\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t vars = vars, \n\t\t\t\t\t\t\t\t\t\t\t\t\t region = \"tract:*\",\n\t\t\t\t\t\t\t\t\t\t\t\t\t regionin = paste0(\"state:\", state_fips),\n\t\t\t\t\t\t\t\t\t\t\t\t\t vintage = 2015)\n\t\n\treturn(income_data)\n\t\n}\n\n# iterate the function\nmap_df(.x = state_fips, # iterate along the vector of state fips codes\n\t\t\t .f = get_income) %>% # apply get_income() to each fips_code  \n\tas_tibble() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,874 × 5\n   state county tract  B19013_001E B19013_001M\n   <chr> <chr>  <chr>        <dbl>       <dbl>\n 1 01    103    005109       29644        4098\n 2 01    103    005106       35864        3443\n 3 01    103    005107       66739        5468\n 4 01    103    005108       64632        9804\n 5 01    103    005701       46306        7926\n 6 01    103    005702       47769       12939\n 7 01    105    686800       30662        7299\n 8 01    009    050102       43325        9484\n 9 01    009    050300       37548        9655\n10 01    009    050700       46452        5167\n# … with 2,864 more rows\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}