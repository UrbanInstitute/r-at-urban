{"title":"Getting started","markdown":{"yaml":{"output":{"html_document":{"includes":{"in_header":"analytics.html"},"css":"styles.css","self_contained":true,"code_folding":"hide","toc":true,"toc_float":true}}},"headingText":"Getting started","containsRefs":false,"markdown":"\n\n<link rel=\"stylesheet\" href=\"//fonts.googleapis.com/css?family=Lato\" />\n\n<div id=\"header\">\n![](tables/images/urban-institute-logo.png)\n</div>\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nknitr::opts_chunk$set(message = FALSE)\nknitr::opts_chunk$set(warning = FALSE)\n\nlibrary(urbnthemes)\n\nset_urbn_defaults(style = \"print\")\n```\n\n\n\nThere are two important steps to building a useful table in R:\n\n1) Get the data frame into the correct shape. \n2) Decide on the output format. \n\nThe section \"Tidy Data\" addresses the first step by outlining `library(broom)` and `library(dplyr)`. Both are powerful tools with uses well beyond making tables.  \n\nThe rest of this document is dedicated to outlining the strengths, weaknesses, uses, and methods of different tools for building tables in R. The following subsections link output formats to tools:\n\n### R Markdown\n\ntodo(aaron): add image\n\nR Markdown is one of the most powerful parts of R. It combines \"text chunks\", \"code chunks\", and \"output chunks\" to create [a range of documents](http://rmarkdown.rstudio.com/gallery.html) including .PDF, .html, Microsoft Word, websites, books, and more (this guide was built using R Markdown!). It is best for creating *entire* documents instead of pieces of larger documents. \n\nMost of the tools in this document are optimized for creating tables using R Markdown. This is fortunate if R Markdown is the tool of choice for a publication and unfortunate if R is just one piece of a heterogeneous workflow.  \n\n### html\n\nThis guide is an html document. Any table in this document can be easily replicated as-is in .html. `kable()`, `library(kableExtra)`, `library(formattable)`, and `library(stargazer)` are the best tools for .html documents. \n\nHere's an example .html table:\n\n```{r optimal-rmarkdown}\nlibrary(formattable)\nlibrary(kableExtra)\nlibrary(tidyverse)\nlibrary(knitr)\n\ndiamonds %>%\n  top_n(5, price) %>%\n  arrange(desc(price)) %>%\n  select(Carat = carat, Cut = cut, Price = price) %>%\n  mutate(Price = currency(Price, digits = 0)) %>%\n  kable(caption = \"Top Diamond Prices\", align = \"rlrr\", format = \"html\") %>%\n  kable_styling(full_width = FALSE, position = \"left\") %>%\n  add_footnote(\"Urban Institute analysis of diamond data\", notation = \"alphabet\")\n```\n\n### PDF\n\nR Markdown is great for \"knitting\" straight to PDF. Many of the tables in this document can be \"knitted\" to PDF with little to no change to the code but the output will look a little different than .html. `kable()`, `library(kableExtra)`, `library(formattable)`, and `library(stargazer)` are the best tools for PDFs. \n\nHere's a great example of a PDF table by Bhargavi Ganesh (HFPC):\n\n![](tables/images/ganesh.png)\n\ntodo(aaron): update Bhargavi example\n\n### LaTeX\n\nLaTeX (pronounced \"lay-tech\") is a syntax/micro-language for typesetting technical and scientific documents. `kable()`, `library(kableExtra)`, and `library(stargazer)` can all write to LaTeX which can then be implemented elsewhere.  \n\nHere's an example of raw LaTeX output by `kable()`:\n\n```{r, out.width = \"500px\", echo=FALSE}\nknitr::include_graphics(\"tables/images/latex.png\")\n```\n\n### Text\n\n`library(stargazer)` is the only real option for printing ASCII tables. \n\n```{r, out.width = \"500px\", echo=FALSE}\nknitr::include_graphics(\"tables/images/ascii.png\")\n```\n\n### Microsoft Word\n\nThe appealing but dense formatting of the Urban Institute's Microsoft Word template makes it effectively impossible right now to \"knit\" or write straight to Microsoft Word for publications. R Markdown and `library(WordR)` can both \"knit\" or write straight to Microsoft Word documents. \n\n### Microsoft Excel\n\nR tools for interacting with Microsoft Excel have never been more powerful. `library(readr)`, `library(writexl)`, and `library(openxlsx)` can write to .csv, .xls, .xlsx without formats, and .xlsx with formats. All three tools are outlined under \"Export to Excel\". \n\nIf Excel is necessary, programmatically write the data to one sheet in a workbook and then use cell references to build Urban Institute-compliant tables in another sheet. This way, the data can be updated without deleting the tables or formatting. \n\n![](tables/images/borough.png)\n\n*An early table in \"A Discours of the Variation of the Cumpas, or Magneticall Needle\" by William Borough (1581)*\n\n## kable()\n\nThe `kable()` function from `library(knitr)` is the simplest way to build tables in R Markdown. \n\n`kable()`'s tables are ugly in the R console, but their default is appealing in R Markdown. Add `css: styles.css` to the R Markdown YAML header before using `kable()` so styles and fonts are Urban Institute compliant.\n\n```{r eval=FALSE}\n---\noutput: \n  html_document:\n    css: styles.css\n---\n```\n\n```{r kable}\nlibrary(tidyverse)\nlibrary(knitr)\n\nmtcars_subset <- mtcars %>%\n\trownames_to_column(var = \"Model\") %>%\n\tselect(Model, MPG = mpg, Cylinders = cyl, Weight = wt) %>%\n\tarrange(-MPG) %>%\n\ttop_n(5, MPG)\n\nmtcars_subset %>%\n\tkable(caption = \"Cars with the best fuel economy\")\n```\n\n### caption\n\n`caption =` adds a title to the R Markdown table. \n\nTitles can also be added with `##`, `###`, `####`, etc. in R Markdown documents. This is advantageous because the table title will be added to the table of contents based on where it falls in the hierarchy of html/R Markdown headers. R Markdown table titles default to the same size as headers with ####.\n\n`#### Cars with the best fuel economy`\n\n#### Cars with the best fuel economy\n\n### digits\n\n`digits =` controls the maximum number of digits for each number in a table. \n\n```{r kable digits}\nlibrary(tidyverse)\nlibrary(knitr)\n\nmtcars_subset %>%\n\tkable(digits = 0)\n```\n\n### col.names\n\nThe first `kable()` example in the `library(kable)` subsection renamed variables with `select()` before making the table. This is often necessary because lower case names with underscores are more common in analyses than Urban Institute-compliant column names (sentence case).\n\nAnother option is to specify a vector of column names when using `kable()`. `col.names =` specifies a vector with which to replace column names. \n\n```{r kable col.names}\nlibrary(tidyverse)\nlibrary(knitr)\n\nmtcars_subset %>%\n\tkable(col.names = c(\"Car model\", \"Fuel Economy\", \"Cylinders\", \"Weight (Tons)\"))\n```\n\n### align\n\n`align =` changes the column alignment. Numeric columns are right-aligned by default and all other columns are left-aligned by default. The arguments for `align =` differ by output type. \n\nAlignment options for PDF are `\"left\"`, `\"center\"`, and `\"right\"` and the options for .html are `\"l\"`, `\"c\"`, and `\"r\"`. Individual columns can be formatted by concatenating options into one vector (ex. `align = c(\"right\", \"left\", \"right\", \"center\"`) for PDF and one character string (ex. `align = \"rlrc\"`) for .html. \n\n```{r alignment}\nlibrary(tidyverse)\nlibrary(knitr)\n\nmtcars_subset %>%\n\tselect(MPG, Cylinders, Weight, Model) %>%\n\tkable(align = \"rlrr\")\n```\n\n### additional arguments\n\n* `trim = FALSE`\n* `nsmall = 0L`\n* `justify = c(\"left\", \"right\", \"centre\", \"none\")`\n* `width = NULL`\n* `na.encode = TRUE`\n* `scientific = NA`\n* `big.mark   = \"\"`  \n* `big.interval = 3L`\n* `small.mark = \"\"`\n* `small.interval = 5L`\n* `decimal.mark = getOption(\"OutDec\")`\n* `zero.print = NULL`\n* `drop0trailing = FALSE, ...)`\n\n## library(kableExtra)\n\n`library(kableExtra)` extends the power and customization of `library(kable)`.\n\n[This article](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html) outlines many of the following capabilities. \n\n### full_width\n\n\"kables\" stretch to the full width of a document by default. `full_width = FALSE` turns off this default. \n\n```{r kableextra full_width}\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(kableExtra)\n\nkable(x = head(mtcars), format = \"html\") %>%\n  kable_styling(full_width = FALSE)\n```\n\n### position\n\nUsing `full_width = F` opens up the possibility of changing the alignment of the table on the page. \n\nFor example, `position = \"left\"`\n\n```{r kableextra position left}\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(kableExtra)\n\nkable(x = head(mtcars), format = \"html\", caption = \"mtcars with position = 'left'\") %>%\n  kable_styling(full_width = FALSE, position = \"left\")\n```\n\n#### mtcars with float_right\n\n```{r kableextra position float right}\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(kableExtra)\n\nkable(x = head(mtcars), format = \"html\") %>%\n  kable_styling(full_width = FALSE, position = \"float_right\")\n```\n\nBody text can be set to the side of a table using `float_right` or `float_left`. The text that appears next to the table goes after the function call in R Markdown documents. \n\n### column_spec\n\nIndividual columns can be formatted with `column_spec()`. The arguments are `width`, `bold`, `italic`, `monospace`, `color` (text color), `background` (column color), `border_left`, and `border_right`. If the paragraph next to a table with `position = \"float_right\"` is too short, the head and text of the subsequent section will appear next to the table. \n\n```{r kableextra column_spec}\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(kableExtra)\n\nkable(x = head(mtcars), format = \"html\", caption = \"Highlight an important column\") %>%\n  kable_styling(full_width = FALSE) %>%\n\tcolumn_spec(3, background = \"#1696d2\")\n```\n\n### row_spec\n\nIndividual rows can be formatted with `row_spec()`. The arguments are `bold`, `italic`, `monospace`, `color` (text color), and `background` (row color). \n\n```{r kableextra row_spec}\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(kableExtra)\n\nkable(x = head(mtcars), format = \"html\", caption = \"Highlight an important row\") %>%\n  kable_styling(full_width = FALSE, position = \"left\") %>%\n\trow_spec(3, color = \"#ffffff\", background = \"#1696d2\", bold = TRUE)\n```\n\n### add_header_above\n\n`library(kableExtra)` can add a second tier of column labels with `add_header_above`.\n\n```{r kableextra add_header_above}\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(kableExtra)\n\ndiamonds %>%\n\tfilter(row_number() < 10) %>%\n\tselect(price, carat, cut, color, clarity) %>%\n\tkable(format = \"html\", caption = \"Diamond features\") %>%\n  kable_styling(full_width = FALSE) %>%\n\tadd_header_above(c(\" \" = 1, \"Shape and size\" = 2, \"Stone color\" = 2))\n```\n\n### group_rows\n  \nSimilarly, `group_rows()` can be used to add an extra tier of row labels. \n\n```{r group rows}\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(kableExtra)\n\ndiamonds %>%\n\tfilter(cut %in% c(\"Ideal\", \"Premium\")) %>%\n\tfilter(row_number() <= 10) %>%\n\tarrange(cut, desc(price)) %>%\n\tselect(carat, color, price) %>%\n\tkable(format = \"html\", caption = \"Diamond prices\") %>%\n\tkable_styling(full_width = FALSE) %>%\n  kableExtra::group_rows(\"Premium\", 1, 6) %>%\n  kableExtra::group_rows(\"Ideal\", 7, 10)\n```\n\n### add_footnote()\n\nAdding footnotes to tables is simple with `add_footnote()`. `notation =` can be set to \"number\", \"alphabet\", or \"symbol\".\n\n```{r simple footnote}\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(kableExtra)\n\ndiamonds %>%\n\tfilter(cut %in% c(\"Ideal\", \"Premium\")) %>%\n\tfilter(row_number() <= 10) %>%\n\tarrange(cut, desc(price)) %>%\n\tselect(carat, color, price) %>%\n\tkable(format = \"html\", caption = \"Diamond prices\") %>%\n\tkable_styling(full_width = FALSE) %>%\n  group_rows(\"Premium\", 1, 6) %>%\n  group_rows(\"Ideal\", 7, 10) %>%\n\tadd_footnote(c(\"All prices are in 2017 dollars\", \"Urban Institute analysis of diamond data\"), notation = \"alphabet\")\n```  \n  \nFootnotes can also reference titles and column headings.   \n  \n```{r complex footnote}  \nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(kableExtra)  \n\ndiamonds %>%\n\tfilter(cut %in% c(\"Ideal\", \"Premium\")) %>%\n\tfilter(row_number() <= 10) %>%\n\tarrange(cut, desc(price)) %>%\n\tselect(carat, color, price) %>%\n\tkable(format = \"html\", caption = \"Diamond prices[note]\") %>%\n\tkable_styling(full_width = FALSE) %>%\n  group_rows(\"Premium [note]\", 1, 6) %>%\n  group_rows(\"Ideal\", 7, 10) %>%\n\tadd_footnote(c(\"Could include blood diamonds\", \"All prices are in 2017 dollars\", \"Urban Institute analysis of diamond data\"), notation = \"alphabet\") \n```\n\n## library(formattable)\n\n`library(formattable)` has two distinct applications. The first is formatting vectors that can be used in any table or output in R. The second is building highly-formatted tables that go beyond `library(kable)` + `library(kableExtra)`. \n\n### Pre-defined Formats\n\nPercentages are usually stored as decimals in R for ease of computation. But it is often desirable to present those decimals as percentages in tables. The function `percent()` quickly converts a vector of decimals like `0.068` into percentages like `6.8%`. The argument `digits =` controls the number of decimal places to be shown.  \n\n```{r formattable::percent()}\nlibrary(tidyverse)\nlibrary(formattable)\n\nunemployment <- tibble(\n\tState = c(\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\"),\n  `2000` = percent(c(.068, .05, .05, .04, .09), digits = 1),\n  `2013` = percent(c(.064, .062, .05, .06, .065), digits = 1),\n  Change = percent(c(-.004, .012, 0, .02, -.025), digits = 1)\n\t)\n\nformattable(unemployment)\n```\n\n`library(formattable)` comes with useful pre-defined formats for `percent()`, `comma()`, `currency()`, `accounting()`, and `scientific()`.\n\n```{r formattable-formats}\nlibrary(tidyverse)\nlibrary(formattable)\n\nformats <- tibble(\n  Percent = percent(c(.068, .05, .05, .04, .09), digits = 1),\n\tComma = comma(c(1000, 10000, 100000, 1000000, 10000000), digits = 0),\n\tCurrency = currency(c(1, 1, 1, 1, 1)),\n\tAccounting = accounting(c(1, 1, 1, 1, 1)),\n\tScientific = scientific(c(0.0001, 100000, 100000000000, 1, 1))\n)\n\t\nformattable(formats)\n```\n\n`library(formattable)` can be combined with any of the tools outlined in this document. All of the format functions can be used on individual vectors and passed to other table functions. \n\nIn this example, `currency()` is used with `kable()` to add a dollar sign and two decimals to price.  \n\n```{r}\nlibrary(tidyverse)\nlibrary(knitr)\n\ndiamonds %>%\n\tmutate(price = currency(price)) %>%\n\thead() %>%\n\tkable(full_width = FALSE)\n```\n\n### formattable tables\n\n`library(formattable)` can add formatting to tables that blurs the line between table and plot. \n\n*Note:* `library(formattable)` creates objects of class `formattable` so it isn't necessary possible to combine all of the features of `library(formattable)` with the packages described elsewhere in this document. \n\n```{r}\nlibrary(tidyverse)\nlibrary(formattable)\n\nunemployment <- tibble(\n\tState = c(\"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\"),\n  unemployment2000 = c(6.8, 5, 5, 4, 9),\n  unemployment2013 = c(6.4, 6.2, 5, 6, 6.5),\n  Change = c(-0.4, 1.2, 0, 2.0, -2.5)\n\t)\n\nsign_formatter <- formatter(\"span\", \n  style = x ~ style(color = ifelse(x > 0, \"green\", \n    ifelse(x < 0, \"red\", \"black\"))))\n\nformattable(unemployment, list(Change = sign_formatter))\n```\n\nThe following example outlines advanced features:\n\n* `color_tile()` creates a colored tile under each observation of a variable\n* `formatter()` establishes rules for a custom format\n* `normalize_bar()` adds colored bars of varying size to each observation of a variable\n* `icontext()` adds glyphs to each observation of variable\n\n```{r formattable-extended}\nlibrary(tidyverse)\nlibrary(formattable)\n\nemployees <- tibble(Tenure = c(27, 8, 6, 5, 4),\n\t\t\t\t\t\t\t\t\t\tPerformance = c(\"B\", \"F\", \"A\", \"A\", \"C\"),\n\t\t\t\t\t\t\t\t\t\t`IT Training` = c(TRUE, FALSE, TRUE, TRUE, TRUE),\n\t\t\t\t\t\t\t\t\t\t`Accrued PTO` = c(98, 2, 8, 38, 6))\n\nformattable(employees, \n\tlist(Tenure = color_tile(\"white\", \"#1696d2\"),\n\t\t\t Performance = formatter(\"span\", \n\t\t\t \t\tstyle = x ~ ifelse(x == \"F\", style(color = \"red\", font.weight = \"bold\"), NA)),\n\t\t\t `IT Training` = formatter(\"span\", style = x ~ style(color = ifelse(x, \"green\", \"red\")),\n    \t\t\tx ~ icontext(ifelse(x, \"ok\", \"remove\"), ifelse(x, \"Yes\", \"No\"))),\n\t\t\t `Accrued PTO` = normalize_bar(\"#fdbf11\", 0.2)\n\t), caption = \"Employees\"\n)\n```\n\n## library(stargazer)\n\n`library(stargazer)` is the best package for exporting \"untidy\", but well-formatted regression tables in .html, LaTeX, and ASCII. These tables can be included in R Markdown documents by adding the argument `results = \"asis\"` to the header of a \"code chunk\". \n\nThey can also be exported as .html code, LaTeX code, and formatted ASCII. \n\n`library(stargazer)` has an abundance of formatting options. [This vignette](https://cran.r-project.org/web/packages/stargazer/vignettes/stargazer.pdf) and [this cheatsheet](https://www.jakeruss.com/cheatsheets/stargazer/) outline most of what can be done with the package. This example shows how a little code can go a long way. Simply build as many models as desired, adjust some of the labels, and add a title. \n\n```{r stargazer, results = \"asis\"}\nlibrary(tidyverse)\nlibrary(stargazer)\n\nlinear1 <- lm(price ~ carat + x + y + z + depth, data = diamonds)\nlinear2 <- lm(price ~ carat + x + y + z, data = diamonds)\n\ndiamonds_indicator <- diamonds %>%\n  mutate(price_indicator = price > 5324)\n\nprobit1 <- glm(price_indicator ~ carat + x + y + z, data = diamonds_indicator, family = binomial(link = \"probit\"))\n\nstargazer(linear1, linear2, probit1, \n          type = \"html\",\n          title = \"Regression Results\",\n          align = TRUE, \n          dep.var.labels = c(\"Overall Prices\", \"High Prices\"),\n          covariate.labels = c(\"Carats\", \"X\", \"Y\", \"Z\", \"Cut\"),\n          no.space = TRUE,\n          digits = 2)\n```\n\n##### Be sure to cite `library(stargazer)`:\n\n> Hlavac, Marek (2015). stargazer: Well-Formatted Regression and Summary Statistics\n> Tables. R package version 5.2. http://CRAN.R-project.org/package=stargazer\n\n## library(DT)\n\n`library(DT)` is an R interface for the DataTables library in JavaScript. This [vignette](https://rstudio.github.io/DT/) for the package outlines many ways output can be customized. \n\nThis example displays an augmented data frame used for a regression. That is, it displays the independent and dependent variables with fitted values, standard-errors of the fitted values, residuals, etc. \n\nThe example shows how columns can be renamed using `colnames = c(\"Price\" = \"price\")`. It's also possible to pass an entire vector of new columns like `colnames = c(\"Price\", \"Carat\", ...)`.\n\n```{r library(DT)}\nlibrary(tidyverse)\nlibrary(DT)\nlibrary(broom)\n\nmodel1 <- lm(formula = mpg ~ wt, data = mtcars)\n\naugment(model1) %>%\n  mutate_at(vars(mpg:.std.resid), round, 2) %>%\n  datatable(colnames = c(\"Miles Per Gallon\" = \"mpg\", \"Weight\" = \"wt\"), options = list(pageLength = 5), style = \"bootstrap\")\n```\n\n## Export to Excel\n\nExporting to Microsoft Excel abandons many of the advantages, like reproducibility, automation and interactivity, of the other tools outlined in this document, but Excel is often a part of Urban Institute researchers' workflows.  \n\n### write_csv()\n\n```{r, out.width = \"300px\", echo=FALSE}\nknitr::include_graphics(\"tables/images/csv.png\")\n```\n\nThe simplest option is to use `write_csv()` from `library(readr)` (loaded in `library(tidyverse)`) to create a .csv that can be opened in Microsoft Excel. Before writing to .csv, be sure to use `library(broom)` to put untidy information into data frames, `library(dplyr)` to select desired rows and columns, and `library(formattable)` to put individual columns into desired formats. \n\n#### Example code\n\n```{r write_csv(), eval=FALSE}\nlibrary(tidyverse)\n\ndiamonds %>%\n\t# select and rename columns\n\tselect(Carat = carat, Price = price) %>%\n\t# filter to the first ten rows\n\tfilter(row_number() <= 10) %>%\n\t# save as .csv\n\twrite_csv(\"diamonds.csv\")\n```\n\n`write_excel_csv()` is a close alternative to `write_csv()` that includes a UTF-8 Byte order mark that indicates to Excel the csv is UTF-8 encoded. All other syntax should be identical. \n\n### library(writexl)\n\n```{r, out.width = \"300px\", echo=FALSE}\nknitr::include_graphics(\"tables/images/excel.png\")\n```\n\n`library(writexl)` is a new package that mimics the light-weight design of `library(readxl)`. It doesn't require JAVA or Microsoft Excel to create and write to a .xlsx document. The package is slim now but more development is expected in the near future. \n\n#### Example code\n\n```{r writexl, eval=FALSE}\nlibrary(tidyverse)\nlibrary(writexl)\n\ndiamonds %>%\n\t# select and rename columns\n\tselect(Carat = carat, Price = price) %>%\n\t# filter to the first ten rows\n\tfilter(row_number() <= 10) %>%\n\t# save as .csv\n\twrite_xlsx(\"diamonds.xlsx\")\n```\n\n### library(openxlsx)\n\n`library(openxlsx)` ([CRAN](https://cran.r-project.org/web/packages/openxlsx/openxlsx.pdf), [GitHub](https://github.com/awalker89/openxlsx)) allows for the creation, writing, and styling of Microsoft Excel documents. It doesn't require JAVA, which is a huge improvement over its predecessors `library(xlsx)` and `library(XLConnect)`. \n\nFor Windows computers, `library(openxlsx)` will require a little extra setup which is outlined in this [GitHub README](https://github.com/awalker89/openxlsx)). Linux and Mac computers don't require any additional setup. \n\nSubmit `vignette(\"Introduction\", package = \"openxlsx\")` in R for a complete introduction to `library(openxlsx)`. \n\n#### Example code\n\nThe biggest advantage of `library(openxlsx)` is the ability to specify workbook, sheet number of name, starting row, and starting column. \n\n```{r openxlsx, eval=FALSE}\nlibrary(tidyverse)\nlibrary(openxlsx)\n\nwriteData(wb, 1, df, startRow = 2, startCol = 2)\n\ndiamonds_subset <- diamonds %>%\n\t# select and rename columns\n\tselect(Carat = carat, Price = price) %>%\n\t# filter to the first ten rows\n\tfilter(row_number() <= 10) %>%\n\t# save as .csv\n\twrite_xlsx(\"diamonds.xlsx\")\n\nwriteData(wb = \"diamonds.xlsx\", \n\t\t\t\t\tsheet = \"price\", \n\t\t\t\t\tx = diamonds_subset, \n\t\t\t\t\tstartRow = 2, \n\t\t\t\t\tstartCol = 2)\n```\n\n`library(openxlsx)` also contains scores of options for controlling the destination format. `?writeData()` is good place to get started with formatting. \n\n## Tidy Data\n\nMost tools for building tables in R require tidy data frames or tibbles. [Tidy data](https://www.jstatsoft.org/article/view/v059i10) has three principles:\n\n1) Each variable forms a column\n2) Each observation forms a row\n3) Each type of observational unit forms a table\n\nNot all R output is tidy. For example, regression output isn't tidy by default: \n\n```{r untidy regression}\nlibrary(tidyverse)\n\nmodel1 <- lm(dist ~ speed, data = cars)\n\nsummary(model1)\n```\n\nIt's easy to print the above output, as-is, to an R Markdown document or send it to a Microsoft Word file. But the above information isn't attractive and it can't be formatted. It also isn't machine readable!\n\nFortunately, R has a suite of packages that make easy tidying data. \n\n```{r tidy regression}\nlibrary(tidyverse)\nlibrary(broom)\ntidy(model1)\n```\n\nNow the regression is in a tidy format with each variable as a column, each observation as a row, and the observational unit is coefficients. It is easy to put data into tables once data are \"tidy\".\n\n### library(broom)\n\n`library(broom)` is useful for converting statistical analysis objects from R into data frames.\n\nRegressions in R are stored in clunky hierarchical data structures. \n\n```{r model 1}\nlibrary(tidyverse)\n\nmodel1 <- lm(dist~speed, data = cars)\nsummary(model1)\n```\n\n#### glance()\n\n`glance()` returns a tidy data frame with one observation for each model. Each column gives a model summary: either a measure of model quality or complexity, or a combination of the two.\n\n```{r glance}\nlibrary(broom)\n\nglance(model1)\n```\n\n#### tidy()\n\n`tidy()` returns a tidy data frame with one observation for each coefficient in a model. Each column gives information about the estimate or its variability.\n\n```{r tidy}\nlibrary(broom)\n\ntidy(model1)\n```\n\n#### augment()\n\n`augment()` returns a tidy data frame with one observation for each observation in the input data set. \n\n```{r augment}\nlibrary(broom)\n\naugment(model1) %>%\n\ttop_n(5)\n```\n\n### library(dplyr)\n\n`library(dplyr)` is a powerful tool for data manipulation. The following \"verbs\" control the most common data manipulations:\n\n1) `select()`: select columns from a data frame\n2) `filter()`: filter rows in a data frame based on a condition or conditions\n3) `arrange()`: change the order of observations in a data frame\n4) `mutate()`: create or alter variables in a data frame\n5) `rename()`: change the name of a variable in a data frame\n6) `summarize()`: summarize values in a data frame into one row or multiple rows for grouped observations\n7) `group_by()`: group observations based on the levels of a variable or levels of variables\n\nThese verbs are useful for changing data frames before converting them into publishable tables.\n\n## Putting it all together\n\nThe code examples above highlight the marginal changes of different functions or arguments. The examples do not put all of the tools together into publication-ready tables. This section will be a repository for tables made for Urban Institute publications in R. \n\n## Appendix\n\n```{r session-info}\nsessionInfo()\n```"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"html_document":{"includes":{"in_header":"analytics.html"},"css":"styles.css","self_contained":true,"code_folding":"hide","toc":true,"toc_float":true}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["analytics.html"],"css":["styles.css"],"toc":true,"output-file":"tables.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.37"},"extensions":{"book":{"multiFile":true}}}}}