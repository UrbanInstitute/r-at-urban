{"title":"Urban Institute R Graphics Guide","markdown":{"yaml":{"output":{"html_document":{"includes":{"in_header":"analytics.html"},"css":"styles.css","code_folding":"show","toc":true,"toc_float":true,"pandoc_args":"--tab-stop=2"}},"editor_options":{"chunk_output_type":"console"}},"headingText":"Urban Institute R Graphics Guide","containsRefs":false,"markdown":"\n\n<link rel=\"stylesheet\" href=\"//fonts.googleapis.com/css?family=Lato\" />\n\n::: {#header}\n<img src=\"graphics-guide/www/images/urban-institute-logo.png\" width=\"350\"/>\n:::\n\n\n```{r setup, include=FALSE}\nlibrary(knitr)\nlibrary(datasets)\nlibrary(tidyverse)\nlibrary(urbnthemes)\n\nset_urbn_defaults(style = \"print\")\n\nopts_chunk$set(fig.path = \"graphics-guide/www/images/\")\nopts_chunk$set(echo = TRUE)\nopts_chunk$set(warning = FALSE)\nopts_chunk$set(message = FALSE)\nopts_chunk$set(fig.width = 6.5)\nopts_chunk$set(fig.height = 4)\nopts_chunk$set(fig.retina = 3)\noptions(scipen = 999)\n```\n\nR is a powerful, open-source programming language and environment. R excels at data management and munging, traditional statistical analysis, machine learning, and reproducible research, but it is probably best known for its graphics. This guide contains examples and instructions for popular and lesser-known plotting techniques in R. It also includes instructions for using `urbnthemes`, the Urban Institute's R package for creating near-publication-ready plots with `ggplot2`. If you have any questions, please don't hesitate to contact Aaron Williams (awilliams\\@urban.org) or Kyle Ueyama (kueyama\\@urban.org).\n\n### Background\n\n`library(urbnthemes)` makes `ggplot2` output align more closely with [the Urban Institute's Data Visualization style guide](http://urbaninstitute.github.io/graphics-styleguide/). This package does **not produce publication ready graphics**. Visual styles must still be edited using your project/paper's normal editing workflow.\n\nExporting charts as a pdf will allow them to be more easily edited. See the Saving Plots section for more information.\n\nThe theme has been tested against `ggplot2 version 3.0.0`. It will not function properly with older versions of `ggplot2`\n\n### Using library(urbnthemes)\n\nRun the following code to install or update `urbnthemes`:\n\n```         \ninstall.packages(\"remotes\")\nremotes::install_github(\"UrbanInstitute/urbnthemes\")\n```\n\nRun the following code at the top of each script:\n\n```         \nlibrary(tidyverse)\nlibrary(urbnthemes)\n\nset_urbn_defaults(style = \"print\")\n```\n\n### Installing Lato {#installing_lato}\n\nYour Urban computer may not have the Lato font installed. If it is not installed, please install the free [Lato font from Google](https://www.google.com/fonts/specimen/Lato). Below are step by step instructions:\n\n1)  Download the [Lato font](https://www.google.com/fonts/specimen/Lato) (as a zip file).\n2)  Unzip the file on your computer.\n3)  For each `.ttf` file in the unzipped `Lato/` folder, double click the file and click `Install` (on Windows) or `Install Font` (on Mac).\n4)  Import and register Lato into R by running `urbnthemes::lato_import()` in the console once. Be patient as this may take a few minutes!\n5)  To confirm installation, run `urbnthemes::lato_test()`. If this is successful you're done and Lato will automatically be used when creating plots with `library(urbnthemes)`. You only need to install Lato once per computer.\n\nWaffle charts with glyphs require fontawesome. `fontawesome_test()` and `fontawesome_install()` are the fontawesome versions of the above functions. Be sure to install fontawesome from [here](https://github.com/hrbrmstr/waffle/tree/master/inst/fonts) first.\n\n### Grammar of Graphics and Conventions\n\nHadley Wickham's ggplot2 is based on Leland Wilkinson's [*The Grammar of Graphics*](https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448) and Wickham's [*A Layered Grammar of Graphics*](http://vita.had.co.nz/papers/layered-grammar.html). The layered grammar of graphics is a structured way of thinking about the components of a plot, which then lend themselves to the simple structure of ggplot2.\n\n-   **Data** are what are visualizaed in a plot and **mappings** are directions for how data are mapped in a plot in a way that can be perceived by humans.\\\n-   **Geoms** are representations of the actual data like points, lines, and bars.\n-   **Stats** are statistical transformations that represent summaries of the data like histograms.\n-   **Scales** map values in the data space to values in the aesthetic space. Scales draw legends and axes.\n-   **Coordinate Systems** describe how geoms are mapped to the plane of the graphic.\\\n-   **Facets** break the data into meaningful subsets like small multiples.\n-   **Themes** control the finer points of a plot such as fonts, font sizes, and background colors.\n\nMore information: [ggplot2: Elegant Graphics for Data Analysis](https://www.amazon.com/ggplot2-Elegant-Graphics-Data-Analysis/dp/0387981403)\n\n### Tips and Tricks\n\n-   `ggplot2` expects data to be in data frames or tibbles. It is preferable for the data frames to be \"tidy\" with each variable as a column, each obseravtion as a row, and each observational unit as a separate table. `dplyr` and `tidyr` contain concise and effective tools for \"tidying\" data.\n\n-   R allows function arguments to be called explicitly by name and implicitly by position. The coding examples in this guide only contain named arguments for clarity.\n\n-   Graphics will sometimes render differently on different operating systems. This is because anti-aliasing is activated in R on Mac and Linux but not activated in R on Windows. This won't be an issue once graphics are saved.\n\n-   Continuous x-axes have ticks. Discrete x-axes do not have ticks. Use `remove_ticks()` to remove ticks.\n\n## Bar Plots\n\n------------------------------------------------------------------------\n\n### One Color\n\n```{r barplots}\nmtcars %>%\n  count(cyl) %>%\n  ggplot(mapping = aes(x = factor(cyl), y = n)) +\n  geom_col() +\n  geom_text(mapping = aes(label = n), vjust = -1) +    \n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Cylinders\",\n       y = NULL) +\n  remove_ticks() +\n  remove_axis() \n```\n\n### One Color (Rotated)\n\nThis example introduces `coord_flip()` and `remove_axis(axis = \"x\", flip = TRUE)`. `remove_axis()` is from `library(urbnthemes)` and creates a custom theme for rotated bar plots.\n\n```{r barplot-rotated}\nmtcars %>%\n  count(cyl) %>%\n  ggplot(mapping = aes(x = factor(cyl), y = n)) +\n  geom_col() +\n  geom_text(mapping = aes(label = n), hjust = -1) +  \n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Cylinders\",\n       y = NULL) +  \n  coord_flip() +\n  remove_axis(axis = \"x\", flip = TRUE)\n```\n\n### Three Colors\n\nThis is identical to the previous plot except colors and a legend are added with `fill = cyl`. Turning `x` into a factor with `factor(cyl)` skips 5 and 7 on the `x-axis`. Adding `fill = cyl` without `factor()` would have created a continuous color scheme and legend.\n\n```{r 3-color-barplot}\nmtcars %>%\n  mutate(cyl = factor(cyl)) %>%\n  count(cyl) %>%\n  ggplot(mapping = aes(x = cyl, y = n, fill = cyl)) +\n  geom_col() +\n  geom_text(mapping = aes(label = n), vjust = -1) +    \n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Cylinders\",\n       y = NULL) +\n  remove_ticks() +\n  remove_axis()\n```\n\n### Stacked Bar Plot\n\nAn additional aesthetic can easily be added to bar plots by adding `fill = categorical variable` to the mapping. Here, transmission type subsets each bar showing the count of cars with different numbers of cylinders.\n\n```{r stacked-bar-plot}\nmtcars %>%\n  mutate(am = factor(am, labels = c(\"Automatic\", \"Manual\")),\n         cyl = factor(cyl)) %>%  \n  group_by(am) %>%\n  count(cyl) %>%\n  group_by(cyl) %>%\n  arrange(desc(am)) %>%\n  mutate(label_height = cumsum(n)) %>%\n  ggplot() +\n  geom_col(mapping = aes(x = cyl, y = n, fill = am)) +\n  geom_text(aes(x = cyl, y = label_height - 0.5, label = n, color = am)) +\n  scale_color_manual(values = c(\"white\", \"black\")) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Cylinders\",\n       y = NULL) +  \n  remove_ticks() +\n  remove_axis() +\n  guides(color = \"none\")\n```\n\n### Stacked Bar Plot With Position = Fill\n\nThe previous examples used `geom_col()`, which takes a y value for bar height. This example uses `geom_bar()` which sums the values and generates a value for bar heights. In this example, `position = \"fill\"` in `geom_bar()` changes the y-axis from count to the proportion of each bar.\n\n```{r stacked-bar-plot-fill}\nmtcars %>%\n  mutate(am = factor(am, labels = c(\"Automatic\", \"Manual\")),\n         cyl = factor(cyl)) %>%  \n  ggplot() +\n  geom_bar(mapping = aes(x = cyl, fill = am), position = \"fill\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1)), labels = scales::percent) +\n  labs(x = \"Cylinders\",\n       y = NULL) +  \n  remove_ticks() +\n  guides(color = \"none\")\n```\n\n### Dodged Bar Plot\n\nSubsetted bar charts in ggplot2 are stacked by default. `position = \"dodge\"` in `geom_col()` expands the bar chart so the bars appear next to each other.\n\n```{r dodged-bar-plot}\nmtcars %>%\n  mutate(am = factor(am, labels = c(\"Automatic\", \"Manual\")),\n         cyl = factor(cyl)) %>%\n  group_by(am) %>%\n  count(cyl) %>%\n  ggplot(mapping = aes(cyl, y = n, fill = factor(am))) +\n  geom_col(position = \"dodge\") +\n  geom_text(aes(label = n), position = position_dodge(width = 0.7), vjust = -1) +    \n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Cylinders\",\n       y = NULL) +  \n  remove_ticks() +\n  remove_axis()\n```\n\n### Lollipop plot/Cleveland dot plot {.tabset}\n\nLollipop plots and Cleveland dot plots are minimalist alternatives to bar plots. The key to both plots is to order the data based on the continuous variable using `arrange()` and then turn the discrete variable into a factor with the ordered levels of the continuous variable using `mutate()`. This step \"stores\" the order of the data.\n\n#### Lollipop plot\n\n```{r lollipop-plot, fig.height = 5}\nmtcars %>%\n\trownames_to_column(\"model\") %>%\n\tarrange(mpg) %>%\n\tmutate(model = factor(model, levels = .$model)) %>%\n\tggplot(aes(mpg, model)) +\n\t\tgeom_segment(aes(x = 0, xend = mpg, y = model, yend = model)) +\t\n\t\tgeom_point() +\n\t\tscale_x_continuous(expand = expansion(mult = c(0, 0)), limits = c(0, 40)) +\n\t\tlabs(x = NULL, \n\t\t\t\t y = \"Miles Per Gallon\")\n```\n\n#### Cleveland dot plot\n\n```{r cleveland-dot-plot, fig.height = 5}\nmtcars %>%\n\trownames_to_column(\"model\") %>%\n\tarrange(mpg) %>%\n\tmutate(model = factor(model, levels = .$model)) %>%\n\tggplot(aes(mpg, model)) +\n\t\tgeom_point() +\n\t\tscale_x_continuous(expand = expansion(mult = c(0, 0)), limits = c(0, 40)) +\n\t\tlabs(x = NULL, \n\t\t\t\t y = \"Miles Per Gallon\")\n```\n\n### Dumbell plot\n\n## Scatter Plots\n\n------------------------------------------------------------------------\n\n### One Color Scatter Plot\n\nScatter plots are useful for showing relationships between two or more variables. Use `scatter_grid()` from `library(urbnthemes)` to easily add vertical grid lines for scatter plots.\n\n```{r one-color-scatter-plot}\nmtcars %>%\n  ggplot(mapping = aes(x = wt, y = mpg)) +\n  geom_point() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 6),\n                     breaks = 0:6) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 40),\n                     breaks = 0:8 * 5) +\n  labs(x = \"Weight (thousands of pounds)\",\n       y = \"City MPG\") +\n  scatter_grid()\n```\n\n### High-Density Scatter Plot with Transparency\n\nLarge numbers of observations can sometimes make scatter plots tough to interpret because points overlap. Adding `alpha =` with a number between 0 and 1 adds transparency to points and clarity to plots. Now it's easy to see that jewelry stores are probably rounding up but not rounding down carats!\n\n```{r alpha-scatter-plot}\ndiamonds %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n  geom_point(alpha = 0.05) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 6),\n                     breaks = 0:6) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 20000),\n                     breaks = 0:4 * 5000,\n                     labels = scales::dollar) +\n  labs(x = \"Carat\",\n       y = \"Price\") +\n  scatter_grid()\n```\n\n### Hex Scatter Plot\n\nSometimes transparency isn't enough to bring clarity to a scatter plot with many observations. As n increases into the hundreds of thousands and even millions, `geom_hex` can be one of the best ways to display relationships between two variables.\n\n```{r scatter-plot-hex}\ndiamonds %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n  geom_hex(mapping = aes(fill = after_stat(count))) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 6),\n                     breaks = 0:6) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 20000),\n                     breaks = 0:4 * 5000,\n                     labels = scales::dollar) +\n\tscale_fill_gradientn(labels = scales::comma) +  \n  labs(x = \"Carat\",\n       y = \"Price\") +\n  scatter_grid() +\n  theme(legend.position = \"right\",\n        legend.direction = \"vertical\")\n```\n\n### Scatter Plots With Random Noise {.tabset}\n\nSometimes scatter plots have many overlapping points but a reasonable number of observations. `geom_jitter` adds a small amount of random noise so points are less likely to overlap. `width` and `height` control the amount of noise that is added. In the following before-and-after, notice how many more points are visible after adding jitter.\n\n#### Before\n\n```{r before-scatter-plot}\nmpg %>%\n  ggplot(mapping = aes(x = displ, y = cty)) +\n  geom_point() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 8),\n                     breaks = 0:8) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 40),\n                     breaks = 0:4 * 10) +\n  labs(x = \"Displacement\",\n       y = \"City MPG\") +\n  scatter_grid()\n```\n\n#### After\n\n```{r jitter-plot}\nset.seed(2017)\nmpg %>%\n  ggplot(mapping = aes(x = displ, y = cty)) +\n  geom_jitter() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 8),\n                     breaks = 0:8) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 40),\n                     breaks = 0:4 * 10) +\n  labs(x = \"Displacement\",\n       y = \"City MPG\") +\n  scatter_grid()\n```\n\n### Scatter Plots with Varying Point Size\n\nWeights and populations can be mapped in scatter plots to the size of the points. Here, the number of households in each state is mapped to the size of each point using `aes(size = hhpop)`. Note: `ggplot2::geom_point()` is used instead of `geom_point()`.\n\n```{r geom_point-size, fig.height = 5}\nurbnmapr::statedata %>%\n  ggplot(mapping = aes(x = medhhincome, y = horate)) +\n  ggplot2::geom_point(mapping = aes(size = hhpop), alpha = 0.3) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(30000, 80000),\n                     breaks = 3:8 * 10000,\n                     labels = scales::dollar) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 0.8),\n                     breaks = 0:4 * 0.2) +\n  scale_radius(range = c(3, 15),\n               breaks = c(2500000, 7500000, 12500000), \n               labels = scales::comma) +\n  labs(x = \"Household income\",\n       y = \"Homeownership rate\") +\n  scatter_grid() +\n\ttheme(plot.margin = margin(r = 20))\n```\n\n### Scatter Plots with Fill\n\nA third aesthetic can be added to scatter plots. Here, color signifies the number of cylinders in each car. Before `ggplot()` is called, Cylinders is created using `library(dplyr)` and the piping operator `%>%`.\n\n```{r filled-scatter-plot}\nmtcars %>%\n  mutate(cyl = paste(cyl, \"cylinders\")) %>%\n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 6),\n                     breaks = 0:6) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 40),\n                     breaks = 0:8 * 5) +\n  labs(x = \"Weight (thousands of pounds)\",\n       y = \"City MPG\") +\n  scatter_grid()\n```\n\n## Line Plots\n\n------------------------------------------------------------------------\n\n```{r line-plots}\neconomics %>%\n  ggplot(mapping = aes(x = date, y = unemploy)) +\n  geom_line() +\n  scale_x_date(expand = expansion(mult = c(0.002, 0)), \n               breaks = \"10 years\",\n               limits = c(as.Date(\"1961-01-01\"), as.Date(\"2020-01-01\")),\n               date_labels = \"%Y\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     breaks = 0:4 * 4000,\n                     limits = c(0, 16000),\n                     labels = scales::comma) +\n  labs(x = \"Year\", \n       y = \"Number Unemployed (1,000s)\")\n```\n\n### Lines Plots With Multiple Lines\n\n```{r multiple-line-charts1}\nlibrary(gapminder)\n\ngapminder %>%\n  filter(country %in% c(\"Australia\", \"Canada\", \"New Zealand\")) %>%\n  mutate(country = factor(country, levels = c(\"Canada\", \"Australia\", \"New Zealand\"))) %>%\n  ggplot(aes(year, gdpPercap, color = country)) +\n  geom_line() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     breaks = c(1952 + 0:12 * 5), \n                     limits = c(1952, 2007)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     breaks = 0:8 * 5000,\n                     labels = scales::dollar, \n                     limits = c(0, 40000)) +\n  labs(x = \"Year\",\n       y = \"Per capita GDP (US dollars)\")\n```\n\nPlotting more than one variable can be useful for seeing the relationship of variables over time, but it takes a small amount of data munging.\n\nThis is because `ggplot2` wants data in a \"long\" format instead of a \"wide\" format for line plots with multiple lines. `gather()` and `spread()` from the `tidyr` package make switching back-and-forth between \"long\" and \"wide\" painless. Essentially, variable titles go into \"key\" and variable values go into \"value\". Then ggplot2, turns the different levels of the key variable (population, unemployment) into colors.\n\n```{r multiple-line-charts2}\nas_tibble(EuStockMarkets) %>%\n\tmutate(date = time(EuStockMarkets)) %>%\n\tgather(key = \"key\", value = \"value\", -date) %>%\n\tggplot(mapping = aes(x = date, y = value, color = key)) +\n\tgeom_line() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(1991, 1999), \n                     breaks = c(1991, 1993, 1995, 1997, 1999)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     breaks = 0:4 * 2500,\n                     labels = scales::dollar, \n                     limits = c(0, 10000)) +  \n\tlabs(x = \"Date\",\n\t\t\t y = \"Value\")\n```\n\n### Step plot\n\n`geom_line()` connects coordinates with the shortest possible straight line. Sometimes step plots are necessary because y values don't change between coordinates. For example, the upper-bound of the Federal Funds Rate is set at regular intervals and remains constant until it is changed.\n\n```{r step-plot}\n# downloaded from FRED on 2018-12-06\n\n# https://fred.stlouisfed.org/series/DFEDTARU\n\nfed_fund_rate <- read_csv(\n  \"date, fed_funds_rate\n   2014-01-01,0.0025\n   2015-12-16,0.0050\n   2016-12-14,0.0075\n   2017-03-16,0.0100\n   2017-06-15,0.0125\n   2017-12-14,0.0150\n   2018-03-22,0.0175\n   2018-06-14,0.0200\n   2018-09-27,0.0225\n   2018-12-06,0.0225\")\n\nfed_fund_rate %>%\n  ggplot(mapping = aes(x = date, y = fed_funds_rate)) + \n  geom_step() +\n  scale_x_date(expand = expansion(mult = c(0.002, 0)), \n               breaks = \"1 year\",\n               limits = c(as.Date(\"2014-01-01\"), as.Date(\"2019-01-01\")),\n               date_labels = \"%Y\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     breaks = c(0, 0.01, 0.02, 0.03),\n                     limits = c(0, 0.03),\n                     labels = scales::percent) +  \n\tlabs(x = \"Date\",\n\t\t\t y = \"Upper-bound of the Federal Funds Rate\")\n```\n\n### Path plot\n\nThe Beveridge curve is a macroeconomic plot that displays a relationship between the unemployment rate and the vacancy rate. Movements along the curve indicate changes in the business cyle and horizontal shifts of the curve suggest structural changes in the labor market.\n\nLines in Beveridge curves do not monotonically move from left to right. Therefore, it is necessary to use `geom_path()`.\n\n```{r, path-plot}\n# seasonally-adjusted, quarterly vacancy rate - JOLTS # seasonally-adjusted, quarterly unemployment rate - CPS\n\n# pulled from FRED on April 11, 2018. \n\nlibrary(ggrepel)\n\nbeveridge <- read_csv(\n\t\"quarter, vacanacy_rate, unempoyment_rate\n\t2006-01-01,0.0310,0.0473\n\t2006-04-01,0.0316,0.0463\n\t2006-07-01,0.0313,0.0463\n\t2006-10-01,0.0310,0.0443\n\t2007-01-01,0.0323,0.0450\n\t2007-04-01,0.0326,0.0450\n\t2007-07-01,0.0316,0.0466\n\t2007-10-01,0.0293,0.0480\n\t2008-01-01,0.0286,0.0500\n\t2008-04-01,0.0280,0.0533\n\t2008-07-01,0.0253,0.0600\n\t2008-10-01,0.0220,0.0686\n\t2009-01-01,0.0196,0.0826\n\t2009-04-01,0.0180,0.0930\n\t2009-07-01,0.0176,0.0963\n\t2009-10-01,0.0180,0.0993\n\t2010-01-01,0.0196,0.0983\n\t2010-04-01,0.0220,0.0963\n\t2010-07-01,0.0216,0.0946\n\t2010-10-01,0.0220,0.0950\n\t2011-01-01,0.0226,0.0903\n\t2011-04-01,0.0236,0.0906\n\t2011-07-01,0.0250,0.0900\n\t2011-10-01,0.0243,0.0863\n\t2012-01-01,0.0270,0.0826\n\t2012-04-01,0.0270,0.0820\n\t2012-07-01,0.0266,0.0803\n\t2012-10-01,0.0260,0.0780\n\t2013-01-01,0.0276,0.0773\n\t2013-04-01,0.0280,0.0753\n\t2013-07-01,0.0280,0.0723\n\t2013-10-01,0.0276,0.0693\n\t2014-01-01,0.0290,0.0666\n\t2014-04-01,0.0323,0.0623\n\t2014-07-01,0.0326,0.0610\n\t2014-10-01,0.0330,0.0570\n\t2015-01-01,0.0350,0.0556\n\t2015-04-01,0.0366,0.0540\n\t2015-07-01,0.0373,0.0510\n\t2015-10-01,0.0360,0.0500\n\t2016-01-01,0.0386,0.0493\n\t2016-04-01,0.0383,0.0486\n\t2016-07-01,0.0383,0.0493\n\t2016-10-01,0.0363,0.0473\n\t2017-01-01,0.0366,0.0466\n\t2017-04-01,0.0390,0.0433\n\t2017-07-01,0.0406,0.0430\n\t2017-10-01,0.0386,0.0410\")\n\nlabels <- beveridge %>%\n  filter(lubridate::month(quarter) == 1)\n\nbeveridge %>%\n\tggplot() +\n\tgeom_path(mapping = aes(x = unempoyment_rate, y = vacanacy_rate), alpha = 0.5) +\n  geom_point(data = labels, mapping = aes(x = unempoyment_rate, y = vacanacy_rate)) +\n  geom_text_repel(data = labels, mapping = aes(x = unempoyment_rate, y = vacanacy_rate, label = lubridate::year(quarter))) +  \n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0.04, 0.1),\n                     labels = scales::percent) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     breaks = c(0, 0.01, 0.02, 0.03, 0.04, 0.05),\n                     limits = c(0, 0.05),\n                     labels = scales::percent) +  \n\tlabs(x = \"Seasonally-adjusted unemployment rate\",\n\t\t\t y = \"Seasonally-adjusted vacancy rate\") +  \n  scatter_grid()\n```\n\n### Slope plots\n\n```{r slope-plot, fig.height = 5}\n# https://www.bls.gov/lau/\nlibrary(ggrepel)\n\nunemployment <- tibble(\n\ttime = c(\"October 2009\", \"October 2009\", \"October 2009\", \"August 2017\", \"August 2017\", \"August 2017\"),\n\trate = c(7.4, 7.1, 10.0, 3.9, 3.8, 6.4),\n\tstate = c(\"Maryland\", \"Virginia\", \"Washington, D.C.\", \"Maryland\", \"Virginia\", \"Washington, D.C.\")\n)\n\nlabel <- tibble(label = c(\"October 2009\", \"August 2017\"))\noctober <- filter(unemployment, time == \"October 2009\")\naugust <- filter(unemployment, time == \"August 2017\")\n\nunemployment %>%\n\tmutate(time = factor(time, levels = c(\"October 2009\", \"August 2017\")),\n\t       state = factor(state, levels = c(\"Washington, D.C.\", \"Maryland\", \"Virginia\"))) %>%\n\tggplot() + \n\tgeom_line(aes(time, rate, group = state, color = state), show.legend = FALSE) +\n\tgeom_point(aes(x = time, y = rate, color = state)) +\n\tlabs(subtitle = \"Unemployment Rate\") +\n\ttheme(axis.ticks.x = element_blank(),\n\t\t\t\taxis.title.x = element_blank(),\n\t\t\t\taxis.ticks.y = element_blank(),\n        axis.title.y = element_blank(), \n        axis.text.y = element_blank(),\n\t\t\t\tpanel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.x = element_blank(),\n\t\t\t\taxis.line = element_blank()) +\n\tgeom_text_repel(data = october, mapping = aes(x = time, y = rate, label = as.character(rate)), nudge_x = -0.06) + \n\tgeom_text_repel(data = august, mapping = aes(x = time, y = rate, label = as.character(rate)), nudge_x = 0.06)\n```\n\n## Univariate\n\n------------------------------------------------------------------------\n\nThere are a number of ways to explore the distributions of univariate data in R. Some methods, like strip charts, show all data points. Other methods, like the box and whisker plot, show selected data points that communicate key values like the median and 25th percentile. Finally, some methods don't show any of the underlying data but calculate density estimates. Each method has advantages and disadvantages, so it is worthwhile to understand the different forms. For more information, read [40 years of boxplots](http://vita.had.co.nz/papers/boxplots.pdf) by Hadley Wickham and Lisa Stryjewski.\n\n### Strip Chart\n\nStrip charts, the simplest univariate plot, show the distribution of values along one axis. Strip charts work best with variables that have plenty of variation. If not, the points tend to cluster on top of each other. Even if the variable has plenty of variation, it is often important to add transparency to the points with `alpha =` so overlapping values are visible.\n\n```{r stripchart, fig.height=2}\nmsleep %>%\n  ggplot(aes(x = sleep_total, y = factor(1))) +\n  geom_point(alpha = 0.2, size = 5) +\n  labs(y = NULL) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 25), \n                     breaks = 0:5 * 5) +\n  scale_y_discrete(labels = NULL) +\n  labs(title = \"Total Sleep Time of Different Mammals\",\n       x = \"Total sleep time (hours)\",\n       y = NULL) +\n  theme(axis.ticks.y = element_blank())\n```\n\n### Strip Chart with Highlighting\n\nBecause strip charts show all values, they are useful for showing where selected points lie in the distribution of a variable. The clearest way to do this is by adding `geom_point()` twice with `filter()` in the data argument. This way, the highlighted values show up on top of unhighlighted values.\n\n```{r stripchart-with-highlighting, fig.height=2}\nggplot() +\n  geom_point(data = filter(msleep, name != \"Red fox\"), \n                    aes(x = sleep_total, \n                        y = factor(1)),\n             alpha = 0.2, \n             size = 5,\n  \t\t\t\t\t color = \"grey50\") +\n  geom_point(data = filter(msleep, name == \"Red fox\"),\n             aes(x = sleep_total, \n                 y = factor(1), \n                 color = name),\n             alpha = 0.8,\n             size = 5) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 25), \n                     breaks = 0:5 * 5) +  \n  scale_y_discrete(labels = NULL) +\n  labs(title = \"Total Sleep Time of Different Mammals\",\n       x = \"Total sleep time (hours)\",\n       y = NULL,\n       legend) +\n  guides(color = guide_legend(title = NULL)) +\n  theme(axis.ticks.y = element_blank())\n```\n\n### Subsetted Strip Chart\n\nAdd a y variable to see the distributions of the continuous variable in subsets of a categorical variable.\n\n```{r subsetted-stripchart, fig.height=3}\nlibrary(forcats)\n\nmsleep %>%\n  filter(!is.na(vore)) %>%\n  mutate(vore = fct_recode(vore, \n                            \"Insectivore\" = \"insecti\",\n                            \"Omnivore\" = \"omni\", \n                            \"Herbivore\" = \"herbi\", \n                            \"Carnivore\" = \"carni\"\n                            )) %>%\n  ggplot(aes(x = sleep_total, y = vore)) +\n  geom_point(alpha = 0.2, size = 5) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 25), \n                     breaks = 0:5 * 5) +  \n  labs(title = \"Total Sleep Time of Different Mammals by Diet\",\n       x = \"Total sleep time (hours)\",\n       y = NULL) +\n  theme(axis.ticks.y = element_blank())\n```\n\n### Beeswarm Plots\n\nBeesward plots are a variation of strip charts that shows the distribution of data, but without the points overlaping.\n\n```{r beeswarm}\nlibrary(ggbeeswarm)\n\ntxhousing %>%\n\tfilter(city %in% c(\"Austin\",\"Houston\",\"Dallas\",\"San Antonio\",\"Fort Worth\")) %>% \n  ggplot(aes(x = median, y = city)) +\n  geom_beeswarm(alpha = 0.2, size = 5) + \n\tscale_x_continuous(labels = scales::dollar) +\n  labs(title = \"Household Sale Price by City\",\n       x = \"Sale Price\",\n       y = NULL) +\n  theme(axis.ticks.y = element_blank())\n\n```\n\n### Histograms\n\nHistograms divide the distribution of a variable into n equal-sized bins and then count and display the number of observations in each bin. Histograms are sensitive to bin width. As `?geom_histogram` notes, \"You should always override \\[the default binwidth\\] value, exploring multiple widths to find the best to illustrate the stories in your data.\"\n\n```{r histogram}\nggplot(data = diamonds, mapping = aes(x = depth)) + \n  geom_histogram(bins = 100) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 100)) +  \n  scale_y_continuous(expand = expansion(mult = c(0, 0.2)), labels = scales::comma) +\n  labs(x = \"Depth\",\n       y = \"Count\")\n```\n\n### Boxplots\n\nBoxplots were invented in the 1970s by John Tukey[^1]. Instead of showing the underlying data or binned counts of the underlying data, they focus on important values like the 25th percentile, median, and 75th percentile.\n\n[^1]: Wickham, H., & Stryjewski, L. (2011). 40 years of boxplots.\n\n```{r box-plot}\nInsectSprays %>%\n  ggplot(mapping =  aes(x = spray, y = count)) +\n  geom_boxplot() +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  labs(x = \"Type of insect spray\",\n       y = \"Number of dead insects\") +\n  remove_ticks()\n```\n\n### Smoothed Kernel Density Plots\n\nContinuous variables with smooth distributions are sometimes better represented with smoothed kernel density estimates than histograms or boxplots. `geom_density()` computes and plots a kernel density estimate. Notice the lumps around integers and halves in the following distribution because of rounding.\n\n```{r kernel-density-plot}\ndiamonds %>%\n  ggplot(mapping = aes(carat)) +\n  geom_density(color = NA) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, NA)) +\n\tscale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  labs(x = \"Carat\",\n       y = \"Density\")\n```\n\n```{r kernel-density-plot-filled}\ndiamonds %>%\n  mutate(cost = ifelse(price > 5500, \"More than $5,500 +\", \"$0 to $5,500\")) %>%\n  ggplot(mapping = aes(carat, fill = cost)) +\n  geom_density(alpha = 0.25, color = NA) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, NA)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Carat\",\n       y = \"Density\")\n```\n\n### Ridgeline Plots\n\nRidgeline plots are partially overlapping smoothed kernel density plots faceted by a categorical variable that pack a lot of information into one elegant plot.\n\n```{r ridgeline-plots}\nlibrary(ggridges)\n\nggplot(diamonds, mapping = aes(x = price, y = cut)) +\n\tgeom_density_ridges(fill = \"#1696d2\") +\n  labs(x = \"Price\",\n       y = \"Cut\")\n```\n\n### Violin Plots\n\nViolin plots are symmetrical displays of smooth kernel density plots.\n\n```{r violin-plot}\nInsectSprays %>%\n  ggplot(mapping = aes(x = spray, y = count, fill = spray)) +\n  geom_violin(color = NA) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  labs(x = \"Type of insect spray\",\n       y = \"Number of dead insects\") +\n  remove_ticks()\n```\n\n### Bean Plot\n\nIndividual outliers and important summary values are not visible in violin plots or smoothed kernel density plots. Bean plots, [created by Peter Kampstra in 2008](https://www.jstatsoft.org/article/view/v028c01), are violin plots with data shown as small lines in a one-dimensional sstrip plot and larger lines for the mean.\n\n```{r beanplot}\nmsleep %>%\n  filter(!is.na(vore)) %>%\n  mutate(vore = fct_recode(vore, \n                            \"Insectivore\" = \"insecti\",\n                            \"Omnivore\" = \"omni\", \n                            \"Herbivore\" = \"herbi\", \n                            \"Carnivore\" = \"carni\"\n                            )) %>%\n  ggplot(aes(x = vore, y = sleep_total, fill = vore)) +\n  stat_summary(fun = \"mean\",\n               colour = \"black\", \n               size = 30,\n               shape = 95,\n               geom = \"point\") +\n  geom_violin(color = NA) +\n  geom_jitter(width = 0,\n              height = 0.05,\n              alpha = 0.4,\n              shape = \"-\",\n              size = 10,\n  \t\t\t\t\t\tcolor = \"grey50\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +  \n    labs(x = NULL,\n         y = \"Total sleep time (hours)\") +\n  theme(legend.position = \"none\") +\n  remove_ticks()\n```\n\n## Area Plot\n\n------------------------------------------------------------------------\n\n### Stacked Area\n\n```{r area-plot-stack}\ntxhousing %>%\n  filter(city %in% c(\"Austin\",\"Houston\",\"Dallas\",\"San Antonio\",\"Fort Worth\")) %>%\n  group_by(city, year) %>%\n  summarize(sales = sum(sales)) %>%\n  ggplot(aes(x = year, y = sales, fill = city)) +\n  geom_area(position = \"stack\") +\n  scale_x_continuous(expand = expansion(mult = c(0, 0)),\n                     limits = c(2000, 2015),\n                     breaks = 2000 + 0:15) +  \n  scale_y_continuous(expand = expansion(mult = c(0, 0.2)), \n                     labels = scales::comma) +\n  labs(x = \"Year\",\n       y = \"Home sales\")\n```\n\n### Filled Area\n\n```{r area-plot-fill}\ntxhousing %>%\n  filter(city %in% c(\"Austin\",\"Houston\",\"Dallas\",\"San Antonio\",\"Fort Worth\")) %>%\n  group_by(city, year) %>%\n  summarize(sales = sum(sales)) %>%\n  ggplot(aes(x = year, y = sales, fill = city)) +\n  geom_area(position = \"fill\") +\n  scale_x_continuous(expand = expansion(mult = c(0, 0)),\n                     limits = c(2000, 2015),\n                     breaks = 2000 + 0:15) +  \n  scale_y_continuous(expand = expansion(mult = c(0, 0.02)),\n                     breaks = c(0, 0.25, 0.5, 0.75, 1),\n                     labels = scales::percent) +\n  labs(x = \"Year\",\n       y = \"Home sales\")\n```\n\n## Sankey Plot\n\n------------------------------------------------------------------------\n\nSankey plots visualize flows from one set of variables to another. This can be useful for showing outcomes from the start of a program to the end. You'll need to install the `ggsankey` package to create Sankey plots in R. In this example I make a dummy data set of housing status prior to program start and at exit to show the flow of people between outcomes. A key step is to transform your data set using the `make_long` function from the package. This creates a data frame that specifies each of the initial nodes and how they flow into the next stage.\n\n```{r}\n# load ggsankey package\nremotes::install_github(\"davidsjoberg/ggsankey\")\nlibrary(ggsankey)\n\n# create a dummy dataset of housing status\ndf <- data_frame(entry_status = c(rep(\"Housed\", 7), rep(\"Unhoused\", 15), rep(\"Staying w/ Family\", 8)), \n                 exit_status = c(rep(\"Housed\", 15), rep(\"Unhoused\", 2), rep(\"Staying w/ Family\", 13))) %>% \n\t# transform the data frame into the proper format for the sankey plot\n  make_long(entry_status, exit_status) %>% \n\t# recode the labels to be cleaner in the plot \n  mutate(x = recode(x, entry_status = \"Prior Housing Status\", exit_status = \"Exit Housing Status\"),\n         next_x = recode(next_x, entry_status = \"Prior Housing Status\", exit_status = \"Exit Housing Status\"))\n\n# create sankey plot\nggplot(df, aes(x = x, \n               next_x = next_x, \n               node = node, \n               next_node = next_node,\n               fill = factor(node), \n               label = node)) +\n  geom_sankey(flow.alpha = 0.5, node.color = 1, show.legend = FALSE) +\n  # add labels to plot and style\n  geom_sankey_label(size = 3.5, color = 1, fill = \"white\") +\n  theme_sankey(base_size = 16)+\n  labs(x = NULL)\n```\n\n## Heat Map\n\n------------------------------------------------------------------------\n\n```{r heat-map}\nlibrary(fivethirtyeight)\n\nbad_drivers %>%\n  filter(state %in% c(\"Maine\", \"New Hampshire\", \"Vermont\", \"Massachusetts\", \"Connecticut\", \"New York\")) %>%\n  mutate(`Number of\\nDrivers` = scale(num_drivers),\n         `Percent\\nSpeeding` = scale(perc_speeding),\n         `Percent\\nAlcohol` = scale(perc_alcohol),\n         `Percent Not\\nDistracted` = scale(perc_not_distracted),\n         `Percent No\\nPrevious` = scale(perc_no_previous),\n         state = factor(state, levels = rev(state))\n         ) %>%\n  select(-insurance_premiums, -losses, -(num_drivers:losses)) %>%\n  gather(`Number of\\nDrivers`:`Percent No\\nPrevious`, key = \"variable\", value = \"SD's from Mean\") %>%\n  ggplot(aes(variable, state)) +\n    geom_tile(aes(fill = `SD's from Mean`)) +\n    labs(x = NULL,\n         y = NULL) + \n    scale_fill_gradientn() +\n    theme(legend.position = \"right\",\n          legend.direction = \"vertical\",\n          axis.line.x = element_blank(),\n          panel.grid.major.y = element_blank()) +\n  remove_ticks()\n#https://learnr.wordpress.com/2010/01/26/ggplot2-quick-heatmap-plotting/\n```\n\n## Faceting and Small Multiples\n\n------------------------------------------------------------------------\n\n### facet_wrap()\n\nR's faceting system is a powerful way to make \"small multiples\".\n\nSome edits to the theme may be necessary depending upon how many rows and columns are in the plot.\n\n```{r small-multiples, fig.height=2}\ndiamonds %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n  geom_point(alpha = 0.05) +\n  facet_wrap(~cut, ncol = 5) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0)),\n                     limits = c(0, 6)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0)),\n                     limits = c(0, 20000), \n                     labels = scales::dollar) +\n  labs(x = \"Carat\",\n       y = \"Price\") +\n  scatter_grid()\n```\n\n### facet_grid()\n\n```{r faceting, fig.height=7}\ndiamonds %>%\n  filter(color %in% c(\"D\", \"E\", \"F\", \"G\")) %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n  geom_point(alpha = 0.05) +\n  facet_grid(color ~ cut) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0)),\n                     limits = c(0, 4)) +  \n  scale_y_continuous(expand = expansion(mult = c(0, 0)),\n                     limits = c(0, 20000), \n                     labels = scales::dollar) +\n  labs(x = \"Carat\",\n       y = \"Price\") +\n  theme(panel.spacing = unit(20L, \"pt\")) +\n  scatter_grid()\n```\n\n## Smoothers\n\n------------------------------------------------------------------------\n\n`geom_smooth()` fits and plots models to data with two or more dimensions.\n\nUnderstanding and manipulating defaults is more important for `geom_smooth()` than other geoms because it contains a number of assumptions. `geom_smooth()` automatically uses loess for datasets with fewer than 1,000 observations and a generalized additive model with `formula = y ~ s(x, bs = \"cs\")` for datasets with greater than 1,000 observations. Both default to a 95% confidence interval with the confidence interval displayed.\n\nModels are chosen with `method =` and can be set to lm(), glm(), gam(), loess(), rlm(), and more. Formulas can be specified with `formula =` and `y ~ x` syntax. Plotting the standard error is toggled with `se = TRUE` and `se = FALSE`, and level is specificed with `level =`. As always, more information can be seen in RStudio with `?geom_smooth()`.\n\n`geom_point()` adds a scatterplot to `geom_smooth()`. The order of the function calls is important. The function called second will be layed on top of the function called first.\n\n```{r geom_smooth}\ndiamonds %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n\tgeom_point(alpha = 0.05) +\n\tgeom_smooth(color =  \"#ec008b\") +\n\tscale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n\t                   limits = c(0, 5),\n\t                   breaks = 0:5) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n                     limits = c(0, 20000), \n                     labels = scales::dollar) +  \n  labs(x = \"Carat\",\n       y = \"Price\") +\n  scatter_grid()\n```\n\n`geom_smooth` can be subset by categorical and factor variables. This requires subgroups to have a decent number of observations and and a fair amount of variability across the x-axis. Confidence intervals often widen at the ends so special care is needed for the chart to be meaningful and readable.\n\nThis example uses Loess with MPG = displacement.\n\n```{r subset-geom_smooth}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = factor(cyl))) +\n\tgeom_point(alpha = 0.2) +\n\tgeom_smooth() +\n\tscale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n\t                   limits = c(0, 7),\n\t                   breaks = 0:7) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n                     limits = c(0, 60)) +  \n\tlabs(x = \"Engine displacement\",\n\t\t\t y = \"Highway MPG\") +\n  scatter_grid()\n```\n\nThis example uses linear models with MPG = displacement.\n\n```{r subset-geom-smooth-lm}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = factor(cyl))) +\n\tgeom_point(alpha = 0.2) +\n\tgeom_smooth(method = \"lm\") +\n\tscale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n\t                   limits = c(0, 7),\n\t                   breaks = 0:7) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n                     limits = c(0, 60)) +  \n\tlabs(x = \"Engine displacement\",\n\t\t\t y = \"Highway MPG\") +\n  scatter_grid()\n```\n\n## Highlighting\n\n------------------------------------------------------------------------\n\n[`library(gghighlight)`](https://yutannihilation.github.io/gghighlight/) enables the intuitive highlighting of ggplot2 plots. `gghighlight` modifies existing ggplot2 objects, so no other code should change. All of the highlighting is handled by the function `gghighlight()`, which can handle all types of geoms.\n\n*Warning:* R will throw an error if too many colors are highlighted because of the design of `urbnthemes`. Simply decrease the number of highlighted geoms to solve this issue.\n\nThere are two main ways to highlight.\n\n### Threshold\n\nThe first way to highlight is with a threshold. Add a logical test to `gghighlight()` to describe which lines should be highlighted. Here, lines with maximum change in per-capita Gross Domestic Product greater than \\$35,000 are highlighted by `gghighlight(max(pcgpd_change) > 35000, use_direct_label = FALSE)`.\n\n```{r gghighlight-threshold}\nlibrary(gghighlight)\nlibrary(gapminder)\n\ndata <- gapminder %>%\n  filter(continent %in% c(\"Europe\")) %>%\n  group_by(country) %>%\n  mutate(pcgpd_change = ifelse(year == 1952, 0, gdpPercap - lag(gdpPercap))) %>%\n  mutate(pcgpd_change = cumsum(pcgpd_change))\n  \ndata %>%\n  ggplot(aes(year, pcgpd_change, group = country, color = country)) +\n  geom_line() +\n  gghighlight(max(pcgpd_change) > 35000, use_direct_label = FALSE) +  \n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)),\n                     breaks = c(seq(1950, 2010, 10)),\n                     limits = c(1950, 2010)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n                     breaks = 0:8 * 5000,\n                     labels = scales::dollar,\n                     limits = c(0, 40000)) +\n  labs(x = \"Year\",\n       y = \"Change in per-capita GDP (US dollars)\")\n```\n\n### Rank\n\nThe second way to highlight is by rank. Here, the countries with the first highest values for change in per-capita Gross Domestic Product are highlighted with `gghighlight(max(pcgpd_change), max_highlight = 5, use_direct_label = FALSE)`.\n\n```{r gghighlight-rank}\ndata %>%\n  ggplot(aes(year, pcgpd_change, group = country, color = country)) +\n  geom_line() +\n  gghighlight(max(pcgpd_change), max_highlight = 5, use_direct_label = FALSE) +  \n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)),\n                     breaks = c(seq(1950, 2010, 10)),\n                     limits = c(1950, 2010)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n                     breaks = 0:8 * 5000,\n                     labels = scales::dollar,\n                     limits = c(0, 40000)) +\n  labs(x = \"Year\",\n       y = \"Change in per-capita GDP (US dollars)\")\n```\n\n### Faceting\n\n`gghighlight()` works well with ggplot2's faceting system.\n\n```{r gghighlight-faceting}\ndata %>%\n  ggplot(aes(year, pcgpd_change, group = country)) +\n  geom_line() +\n  gghighlight(max(pcgpd_change), max_highlight = 4, use_direct_label = FALSE) +  \n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)),\n                     breaks = c(seq(1950, 2010, 10)),\n                     limits = c(1950, 2010)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n                     breaks = 0:8 * 5000,\n                     labels = scales::dollar,\n                     limits = c(0, 40000)) +\n  labs(x = \"Year\",\n       y = \"Change in per-capita GDP (US dollars)\") +\n  facet_wrap(~ country) +\n  theme(panel.spacing = unit(20L, \"pt\"))\n```\n\n## Text and Annotation\n\n------------------------------------------------------------------------\n\nSeveral functions can be used to annotate, label, and highlight different parts of plots. `geom_text()` and `geom_text_repel()` both display variables from data frames. `annotate()`, which has several different uses, displays variables and values included in the function call.\n\n### geom_text()\n\n`geom_text()` turns text variables in data sets into geometric objects. This is useful for labeling data in plots. Both functions need `x` values and `y` values to determine placement on the coordinate plane, and a text vector of labels.\n\nThis can be used to label `geom_bar()`.\n\n```{r bar-geom_text}\ndiamonds %>%\n  group_by(cut) %>%\n  summarize(price = mean(price)) %>%\n  ggplot(aes(cut, price)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = scales::dollar(price)), vjust = -1) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2)),\n  \t\t\t\t\t\t\t\t\t labels = scales::dollar) +\n  labs(title = \"Average Diamond Price by Diamond Cut\",\n       x = \"Cut\",\n       y = \"Price\") +\n  remove_ticks()\n```\n\nIt can also be used to label points in a scatter plot.\n\nIt's rarely useful to label every point in a scatter plot. Use `filter()` to create a second data set that is subsetted and pass it into the labelling function.\n\n```{r scatterplot-geom_text}\nlabels <- mtcars %>%\n\trownames_to_column(\"model\") %>%\n\tfilter(model %in% c(\"Toyota Corolla\", \"Merc 240D\", \"Datsun 710\"))\n\nmtcars %>%\n\tggplot() +\n\tgeom_point(mapping = aes(x = wt, y = mpg)) +\n\tgeom_text(data = labels, mapping = aes(x = wt, y = mpg, label = model), nudge_x = 0.38) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 6)) + \n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 40)) +  \n  labs(x = \"Weight (Tons)\",\n       y = \"Miles per gallon (MPG)\") +\n  scatter_grid()\n```\n\nText too often overlaps with other text or geoms when using `geom_text()`. `library(ggrepel)` is a `library(ggplot2)` add-on that automatically positions text so it doesn't overlap with geoms or other text. To add this functionality, install and load `library(ggrepel)` and then use `geom_text_repel()` with the same syntax as `geom_text()`.\n\n### geom_text_repel()\n\n```{r scatterplot-geom_text_repel}\nlibrary(ggrepel)\n\nlabels <- mtcars %>%\n\trownames_to_column(\"model\") %>%\n\ttop_n(5, mpg)\n\nmtcars %>%\n\tggplot(mapping = aes(x = wt, y = mpg)) +\n\tgeom_point() +\n\tgeom_text_repel(data = labels, \n\t                mapping = aes(label = model), \n\t                nudge_x = 0.38) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 6)) + \n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 40)) +  \n  labs(x = \"Weight (Tons)\",\n       y = \"Miles per gallon (MPG)\") +\n  scatter_grid()\n```\n\n### annotate()\n\n`annotate()` doesn't use data frames. Instead, it takes values for `x =` and `y =`. It can add text, rectangles, segments, and pointrange.\n\n```{r annotate-point}\nmsleep %>%\n  filter(bodywt <= 1000) %>%\n  ggplot(aes(bodywt, sleep_total)) +\n  geom_point() +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(-10, 1000),\n  \t\t\t\t\t\t\t\t\t labels = scales::comma) + \n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 25)) +  \n  annotate(\"text\", x = 500, y = 12, label = \"These data suggest that heavy \\n animals sleep less than light animals\") +\n  labs(x = \"Body weight (pounds)\",\n       y = \"Sleep time (hours)\") +\n  scatter_grid()  \n```\n\n```{r annotate-rect}\nlibrary(AmesHousing)\n\names <- make_ames()\n\names %>%\n  mutate(square_footage = Total_Bsmt_SF - Bsmt_Unf_SF + First_Flr_SF + Second_Flr_SF) %>%\n  mutate(Sale_Price = Sale_Price / 1000) %>%  \n  ggplot(aes(square_footage, Sale_Price)) +\n  geom_point(alpha = 0.2) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(-10, 12000),\n  \t\t\t\t\t\t\t\t\t labels = scales::comma) + \n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 800),\n  \t\t\t\t\t\t\t\t\t labels = scales::dollar) +  \n  annotate(\"rect\", xmin = 6800, xmax = 11500, ymin = 145, ymax = 210, alpha = 0.1) +\n  annotate(\"text\", x = 8750, y = 230, label = \"Unfinished homes\") +\n  labs(x = \"Square footage\", \n       y = \"Sale price (thousands)\") +\n  scatter_grid()   \n```\n\n## Layered Geoms\n\n------------------------------------------------------------------------\n\nGeoms can be layered in `ggplot2`. This is useful for design and analysis.\n\nIt is often useful to add points to line plots with a small number of values across the x-axis. This example from [R for Data Science](http://r4ds.had.co.nz/tidy-data.html) shows how changing the line to grey can be appealing.\n\n### Design {.tabset}\n\n#### Before\n\n```{r layering-geoms-design}\ntable1 %>%\n\tggplot(aes(x = year, y = cases)) +\n\t\tgeom_line(aes(color = country)) +\n\t\tgeom_point(aes(color = country)) +\n\t\tscale_y_continuous(expand = expansion(mult = c(0, 0.2)), \n\t\t                   labels = scales::comma) +\n\t\tscale_x_continuous(breaks = c(1999, 2000)) +\n\t\tlabs(title = \"Changes in Tuberculosis Cases in Three Countries\")\n```\n\n#### After\n\n```{r layering-geoms-design-gray}\ntable1 %>%\n\tggplot(aes(year, cases)) +\n\t\tgeom_line(aes(group = country), color = \"grey50\") +\n\t\tgeom_point(aes(color = country)) +\n\t\tscale_y_continuous(expand = expansion(mult = c(0, 0.2)), \n\t\t                   labels = scales::comma) +\n\t\tscale_x_continuous(breaks = c(1999, 2000)) +\n\t\tlabs(title = \"Changes in Tuberculosis Cases in Three Countries\")\n```\n\n### Centroids\n\n```{r centroids}\nmpg_summary <- mpg %>%\n\tgroup_by(cyl) %>%\n\tsummarize(displ = mean(displ), cty = mean(cty))\n\nmpg %>%\n\tggplot() +\n\tgeom_point(aes(x = displ, y = cty, color = factor(cyl)), alpha = 0.5) +\n\tgeom_point(data = mpg_summary, aes(x = displ, y = cty), size = 5, color = \"#ec008b\") +\n\tgeom_text(data = mpg_summary, aes(x = displ, y = cty, label = cyl)) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 8)) +  \n  scale_y_continuous(expand = expansion(mult = c(0, 0)), \n                     limits = c(0, 40)) +\n\tlabs(x = \"Displacement\",\n\t     y = \"City MPG\") +\n  scatter_grid()\n```\n\n## Saving Plots\n\n------------------------------------------------------------------------\n\n`ggsave()` exports ggplot2 plots. The function can be used in two ways. If `plot =` isn't specified in the function call, then `ggsave()` automatically saves the plot that was last displayed in the Viewer window. Second, if `plot =` is specified, then `ggsave()` saves the specified plot. `ggsave()` guesses the type of graphics device to use in export (.png, .pdf, .svg, etc.) from the file extension in the filename.\n\n```         \nmtcars %>%\n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point()\n\nggsave(filename = \"cars.png\")\n\nplot2 <- mtcars %>%\n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point()\n\nggsave(filename = \"cars.png\", plot = plot2)\n```\n\nExported plots rarely look identical to the plots that show up in the Viewer window in RStudio because the overall size and aspect ratio of the Viewer is often different than the defaults for `ggsave()`. Specific sizes, aspect ratios, and resolutions can be controlled with arguments in `ggsave()`. RStudio has a useful [cheatsheet](https://www.rstudio.com/resources/cheatsheets/) called \"How Big is Your Graph?\" that should help with choosing the best size, aspect ratio, and resolution.\n\nFonts are not embedded in PDFs by default. To embed fonts in PDFs, include `device = cairo_pdf` in `ggsave()`.\n\n```         \nplot <- mtcars %>%\n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point()\n\nggsave(filename = \"cars.pdf\", plot = plot2, width = 6.5, height = 4, device = cairo_pdf)\n```\n\n## Interactive Plots\n\nWe can make any of the previous plots interactive with the powerful and easy `plotly` library. All we have to do is wrap a ggplot object in the `ggplotly` function. *Note:* You can't add `ggplotly` to the end of a ggplot object, but have to actually save the ggplot as a variable and then wrap that in the function call as shown below.\n\nYou can customize the tooltip text by adding a value to `text` in `aes()` and then specifying `tooltip = \"text\"` in the `ggplotly` call.\n\n```{r}\nlibrary(plotly)\n\nstock_plot <- as_tibble(EuStockMarkets) %>% \n    mutate(date = time(EuStockMarkets)) %>% \n    gather(key = \"key\", value = \"value\", -date) %>% \n    ggplot(mapping = aes(x = date, y = value, color = key,\n    \t\t\t\t\t\t\t\t\t\t # sometimes ggplotly messes with line charts,\n    \t\t\t\t\t\t\t\t\t\t # adding a group value usually helps with that\n    \t\t\t\t\t\t\t\t\t\t group = key,\n    \t\t\t\t\t\t\t\t\t\t # customize the tooltip with the text aes\n    \t\t\t\t\t\t\t\t\t\t text = paste0(\"Value: \", round(value, 2), \"<br>\",\n    \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\"Date: \", round(date, 3), \"<br>\",\n    \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\"Key: \", key))\n    \t\t\t\t\t\t\t\t\t\t ) +\n    geom_line() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(1991, 1999), \n                     breaks = c(1991, 1993, 1995, 1997, 1999)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     breaks = 0:4 * 2500,\n                     labels = scales::dollar, \n                     limits = c(0, 10000)) +  \n    labs(x = \"Date\",\n             y = \"Value\")\n\n# make interactive with gggplotly\n# Uncomment pipe to hide the interative toolbar in the top right \nggplotly(stock_plot, tooltip = \"text\")  # %>%  config(displayModeBar = FALSE)\n```\n\n## urbnthemes\n\n### Overview\n\n`urbnthemes` is a set of tools for creating Urban Institute-themed plots and maps in R. The package extends `ggplot2` with print and map themes as well as tools that make plotting easier at the Urban Institute. `urbnthemes` replaces the [urban_R_theme](https://github.com/UrbanInstitute/urban_R_theme).\n\nAlways load `library(urbnthemes)` after `library(ggplot2)` or `library(tidyverse)`.\n\n### Usage\n\nUse `set_urbn_defaults(style = \"print\")` to set the default styles. `scatter_grid()`, `remove_ticks()`, `add_axis()`, and `remove_axis()` can all be used to improve graphics.\n\n```{r example, message=FALSE}\nlibrary(ggplot2)\nlibrary(urbnthemes)\n\nset_urbn_defaults(style = \"print\")\n\nggplot(data = mtcars, mapping = aes(factor(cyl))) +\n  geom_bar() + \n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Number of Cylinders\",\n       y = \"Count\") +\n  remove_ticks()\n```\n\n### Combining elements\n\n`library(urbnthemes)` contains functions for combining plot elements into graphics. `urbn_plot()` brings all of the elements together.\n\n-   `urbn_logo_text()`\n-   `remove_ticks()`\n-   `remove_axis()`\n-   `scatter_grid()`\n-   `add_axis()`\n-   `urbn_geofacet`\n\n```{r example2}\nlibrary(ggplot2)\nlibrary(urbnthemes)\n\nset_urbn_defaults(style = \"print\")\n\nplot <- ggplot(data = mtcars, mapping = aes(factor(cyl))) +\n  geom_bar() + \n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Number of Cylinders\",\n       y = \"Count\") +\n  remove_ticks()\n\nurbn_plot(plot, urbn_logo_text(), ncol = 1, heights = c(30, 1))\n```\n\nSometimes it's important to horizontally add the y-axis title above the plot. `urbn_y_title()` can be sued for this task. The following example goes one step further and adds the title between the legend and the plot.\n\n```{r}\nlibrary(ggplot2)\nlibrary(urbnthemes)\n\nset_urbn_defaults()\n\nplot <- ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, color = factor(cyl))) +\n  geom_point() + \n\tscale_x_continuous(expand = c(0, 0),\n\t\t\t\t\t\t\t\t\t\t limits = c(0, 8)) +\n  scale_y_continuous(expand = c(0, 0),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 40)) +\n  remove_ticks() +\n\tlabs(\"\") +\n\tscatter_grid()\n\nurbn_plot(get_legend(plot),\n\t\t\t\t\turbn_y_title(\"Miles per gallon\"),\n\t\t\t\t\tremove_legend(plot), \n\t\t\t\t\turbn_logo_text(), \n\t\t\t\t\tncol = 1, \n\t\t\t\t\theights = c(3, 1, 30, 1))\n```\n\n### Palettes\n\n`urbnthemes` contains many quick-access color palettes from the [Urban Institute Data Visualization Style Guide](http://urbaninstitute.github.io/graphics-styleguide/). These palettes can be used to quickly overwrite default color palettes from `urbnthemes`.\n\n-   `palette_urbn_main` is the eight color discrete palette of the Urban Institute with cyan, yellow, black, gray, magenta, green, space gray, and red.\n-   `palette_urbn_diverging` is an eight color diverging palette.\n-   `palette_urbn_quintile` is a five color blue palette that is good for quintiles.\n-   `palette_urbn_politics` is a two color palette with blue for Democrats and red for Republicans.\n\nThere are seven palettes that are continuous palettes of the seven unique colors in the discrete Urban Institute color palette:\n\n-   `palette_urbn_cyan`\n-   `palette_urbn_gray`\n-   `palette_urbn_yellow`\n-   `palette_urbn_magenta`\n-   `palette_urbn_green`\n-   `palette_urbn_spacegray`\n-   `palette_urbn_red`\n\nUse `view_palette()` to see the palette:\n\n```{r view-palette}\nview_palette(palette_urbn_magenta)\n```\n\nThe vectors can be subset using base R syntax. This allows for the quick selection of specific colors from a palette.\n\n```{r palette-subset1}\npalette_urbn_main[1:4]\n```\n\n```{r palette-subset2}\npalette_urbn_spacegray[1:5]\n```\n\n### Utility functions\n\n`library(urbnthemes)` contains four functions that are helpful with managing font instalations:\n\n-   `lato_test()`\n-   `lato_install()`\n-   `fontawesome_test()`\n-   `fontawesome_install()`\n\n## Bibliography and Session Information\n\n------------------------------------------------------------------------\n\n*Note:* Examples present in [this document](https://awunderground.github.io/ggplot2-themes/) by Aaron Williams were created during personal time.\n\nBob Rudis and Dave Gandy (2017). waffle: Create Waffle Chart Visualizations in R. R package version 0.7.0. https://CRAN.R-project.org/package=waffle\n\nChester Ismay and Jennifer Chunn (2017). fivethirtyeight: Data and Code Behind the Stories and Interactives at 'FiveThirtyEight'. R package version 0.3.0. https://CRAN.R-project.org/package=fivethirtyeight\n\nHadley Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2009.\n\nHadley Wickham (2017). tidyverse: Easily Install and Load the 'Tidyverse'. R package version 1.2.1. https://CRAN.R-project.org/package=tidyverse\n\nHadley Wickham (2017). forcats: Tools for Working with Categorical Variables (Factors). R package version 0.2.0. https://CRAN.R-project.org/package=forcats\n\nJennifer Bryan (2017). gapminder: Data from Gapminder. R package version 0.3.0. https://CRAN.R-project.org/package=gapminder\n\nKamil Slowikowski (2017). ggrepel: Repulsive Text and Label Geoms for 'ggplot2'. R package version 0.7.0. https://CRAN.R-project.org/package=ggrepel\n\nMax Kuhn (2017). AmesHousing: The Ames Iowa Housing Data. R package version 0.0.3. https://CRAN.R-project.org/package=AmesHousing\n\nPeter Kampstra (2008). Beanplot: A Boxplot Alternative for Visual Comparison of Distributions, Journal of Statistical Software, 2008. https://www.jstatsoft.org/article/view/v028c01\n\nR Core Team (2017). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL https://www.R-project.org/.\n\nWinston Chang, (2014). extrafont: Tools for using fonts. R package version 0.17. https://CRAN.R-project.org/package=extrafont\n\nYihui Xie (2018). knitr: A General-Purpose Package for Dynamic Report Generation in R. R package version 1.19.\n\n```{r System Info and Package Versioning}\nsessionInfo()\n```\n","srcMarkdownNoYaml":"\n\n<link rel=\"stylesheet\" href=\"//fonts.googleapis.com/css?family=Lato\" />\n\n::: {#header}\n<img src=\"graphics-guide/www/images/urban-institute-logo.png\" width=\"350\"/>\n:::\n\n# Urban Institute R Graphics Guide\n\n```{r setup, include=FALSE}\nlibrary(knitr)\nlibrary(datasets)\nlibrary(tidyverse)\nlibrary(urbnthemes)\n\nset_urbn_defaults(style = \"print\")\n\nopts_chunk$set(fig.path = \"graphics-guide/www/images/\")\nopts_chunk$set(echo = TRUE)\nopts_chunk$set(warning = FALSE)\nopts_chunk$set(message = FALSE)\nopts_chunk$set(fig.width = 6.5)\nopts_chunk$set(fig.height = 4)\nopts_chunk$set(fig.retina = 3)\noptions(scipen = 999)\n```\n\nR is a powerful, open-source programming language and environment. R excels at data management and munging, traditional statistical analysis, machine learning, and reproducible research, but it is probably best known for its graphics. This guide contains examples and instructions for popular and lesser-known plotting techniques in R. It also includes instructions for using `urbnthemes`, the Urban Institute's R package for creating near-publication-ready plots with `ggplot2`. If you have any questions, please don't hesitate to contact Aaron Williams (awilliams\\@urban.org) or Kyle Ueyama (kueyama\\@urban.org).\n\n### Background\n\n`library(urbnthemes)` makes `ggplot2` output align more closely with [the Urban Institute's Data Visualization style guide](http://urbaninstitute.github.io/graphics-styleguide/). This package does **not produce publication ready graphics**. Visual styles must still be edited using your project/paper's normal editing workflow.\n\nExporting charts as a pdf will allow them to be more easily edited. See the Saving Plots section for more information.\n\nThe theme has been tested against `ggplot2 version 3.0.0`. It will not function properly with older versions of `ggplot2`\n\n### Using library(urbnthemes)\n\nRun the following code to install or update `urbnthemes`:\n\n```         \ninstall.packages(\"remotes\")\nremotes::install_github(\"UrbanInstitute/urbnthemes\")\n```\n\nRun the following code at the top of each script:\n\n```         \nlibrary(tidyverse)\nlibrary(urbnthemes)\n\nset_urbn_defaults(style = \"print\")\n```\n\n### Installing Lato {#installing_lato}\n\nYour Urban computer may not have the Lato font installed. If it is not installed, please install the free [Lato font from Google](https://www.google.com/fonts/specimen/Lato). Below are step by step instructions:\n\n1)  Download the [Lato font](https://www.google.com/fonts/specimen/Lato) (as a zip file).\n2)  Unzip the file on your computer.\n3)  For each `.ttf` file in the unzipped `Lato/` folder, double click the file and click `Install` (on Windows) or `Install Font` (on Mac).\n4)  Import and register Lato into R by running `urbnthemes::lato_import()` in the console once. Be patient as this may take a few minutes!\n5)  To confirm installation, run `urbnthemes::lato_test()`. If this is successful you're done and Lato will automatically be used when creating plots with `library(urbnthemes)`. You only need to install Lato once per computer.\n\nWaffle charts with glyphs require fontawesome. `fontawesome_test()` and `fontawesome_install()` are the fontawesome versions of the above functions. Be sure to install fontawesome from [here](https://github.com/hrbrmstr/waffle/tree/master/inst/fonts) first.\n\n### Grammar of Graphics and Conventions\n\nHadley Wickham's ggplot2 is based on Leland Wilkinson's [*The Grammar of Graphics*](https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448) and Wickham's [*A Layered Grammar of Graphics*](http://vita.had.co.nz/papers/layered-grammar.html). The layered grammar of graphics is a structured way of thinking about the components of a plot, which then lend themselves to the simple structure of ggplot2.\n\n-   **Data** are what are visualizaed in a plot and **mappings** are directions for how data are mapped in a plot in a way that can be perceived by humans.\\\n-   **Geoms** are representations of the actual data like points, lines, and bars.\n-   **Stats** are statistical transformations that represent summaries of the data like histograms.\n-   **Scales** map values in the data space to values in the aesthetic space. Scales draw legends and axes.\n-   **Coordinate Systems** describe how geoms are mapped to the plane of the graphic.\\\n-   **Facets** break the data into meaningful subsets like small multiples.\n-   **Themes** control the finer points of a plot such as fonts, font sizes, and background colors.\n\nMore information: [ggplot2: Elegant Graphics for Data Analysis](https://www.amazon.com/ggplot2-Elegant-Graphics-Data-Analysis/dp/0387981403)\n\n### Tips and Tricks\n\n-   `ggplot2` expects data to be in data frames or tibbles. It is preferable for the data frames to be \"tidy\" with each variable as a column, each obseravtion as a row, and each observational unit as a separate table. `dplyr` and `tidyr` contain concise and effective tools for \"tidying\" data.\n\n-   R allows function arguments to be called explicitly by name and implicitly by position. The coding examples in this guide only contain named arguments for clarity.\n\n-   Graphics will sometimes render differently on different operating systems. This is because anti-aliasing is activated in R on Mac and Linux but not activated in R on Windows. This won't be an issue once graphics are saved.\n\n-   Continuous x-axes have ticks. Discrete x-axes do not have ticks. Use `remove_ticks()` to remove ticks.\n\n## Bar Plots\n\n------------------------------------------------------------------------\n\n### One Color\n\n```{r barplots}\nmtcars %>%\n  count(cyl) %>%\n  ggplot(mapping = aes(x = factor(cyl), y = n)) +\n  geom_col() +\n  geom_text(mapping = aes(label = n), vjust = -1) +    \n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Cylinders\",\n       y = NULL) +\n  remove_ticks() +\n  remove_axis() \n```\n\n### One Color (Rotated)\n\nThis example introduces `coord_flip()` and `remove_axis(axis = \"x\", flip = TRUE)`. `remove_axis()` is from `library(urbnthemes)` and creates a custom theme for rotated bar plots.\n\n```{r barplot-rotated}\nmtcars %>%\n  count(cyl) %>%\n  ggplot(mapping = aes(x = factor(cyl), y = n)) +\n  geom_col() +\n  geom_text(mapping = aes(label = n), hjust = -1) +  \n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Cylinders\",\n       y = NULL) +  \n  coord_flip() +\n  remove_axis(axis = \"x\", flip = TRUE)\n```\n\n### Three Colors\n\nThis is identical to the previous plot except colors and a legend are added with `fill = cyl`. Turning `x` into a factor with `factor(cyl)` skips 5 and 7 on the `x-axis`. Adding `fill = cyl` without `factor()` would have created a continuous color scheme and legend.\n\n```{r 3-color-barplot}\nmtcars %>%\n  mutate(cyl = factor(cyl)) %>%\n  count(cyl) %>%\n  ggplot(mapping = aes(x = cyl, y = n, fill = cyl)) +\n  geom_col() +\n  geom_text(mapping = aes(label = n), vjust = -1) +    \n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Cylinders\",\n       y = NULL) +\n  remove_ticks() +\n  remove_axis()\n```\n\n### Stacked Bar Plot\n\nAn additional aesthetic can easily be added to bar plots by adding `fill = categorical variable` to the mapping. Here, transmission type subsets each bar showing the count of cars with different numbers of cylinders.\n\n```{r stacked-bar-plot}\nmtcars %>%\n  mutate(am = factor(am, labels = c(\"Automatic\", \"Manual\")),\n         cyl = factor(cyl)) %>%  \n  group_by(am) %>%\n  count(cyl) %>%\n  group_by(cyl) %>%\n  arrange(desc(am)) %>%\n  mutate(label_height = cumsum(n)) %>%\n  ggplot() +\n  geom_col(mapping = aes(x = cyl, y = n, fill = am)) +\n  geom_text(aes(x = cyl, y = label_height - 0.5, label = n, color = am)) +\n  scale_color_manual(values = c(\"white\", \"black\")) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Cylinders\",\n       y = NULL) +  \n  remove_ticks() +\n  remove_axis() +\n  guides(color = \"none\")\n```\n\n### Stacked Bar Plot With Position = Fill\n\nThe previous examples used `geom_col()`, which takes a y value for bar height. This example uses `geom_bar()` which sums the values and generates a value for bar heights. In this example, `position = \"fill\"` in `geom_bar()` changes the y-axis from count to the proportion of each bar.\n\n```{r stacked-bar-plot-fill}\nmtcars %>%\n  mutate(am = factor(am, labels = c(\"Automatic\", \"Manual\")),\n         cyl = factor(cyl)) %>%  \n  ggplot() +\n  geom_bar(mapping = aes(x = cyl, fill = am), position = \"fill\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1)), labels = scales::percent) +\n  labs(x = \"Cylinders\",\n       y = NULL) +  \n  remove_ticks() +\n  guides(color = \"none\")\n```\n\n### Dodged Bar Plot\n\nSubsetted bar charts in ggplot2 are stacked by default. `position = \"dodge\"` in `geom_col()` expands the bar chart so the bars appear next to each other.\n\n```{r dodged-bar-plot}\nmtcars %>%\n  mutate(am = factor(am, labels = c(\"Automatic\", \"Manual\")),\n         cyl = factor(cyl)) %>%\n  group_by(am) %>%\n  count(cyl) %>%\n  ggplot(mapping = aes(cyl, y = n, fill = factor(am))) +\n  geom_col(position = \"dodge\") +\n  geom_text(aes(label = n), position = position_dodge(width = 0.7), vjust = -1) +    \n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Cylinders\",\n       y = NULL) +  \n  remove_ticks() +\n  remove_axis()\n```\n\n### Lollipop plot/Cleveland dot plot {.tabset}\n\nLollipop plots and Cleveland dot plots are minimalist alternatives to bar plots. The key to both plots is to order the data based on the continuous variable using `arrange()` and then turn the discrete variable into a factor with the ordered levels of the continuous variable using `mutate()`. This step \"stores\" the order of the data.\n\n#### Lollipop plot\n\n```{r lollipop-plot, fig.height = 5}\nmtcars %>%\n\trownames_to_column(\"model\") %>%\n\tarrange(mpg) %>%\n\tmutate(model = factor(model, levels = .$model)) %>%\n\tggplot(aes(mpg, model)) +\n\t\tgeom_segment(aes(x = 0, xend = mpg, y = model, yend = model)) +\t\n\t\tgeom_point() +\n\t\tscale_x_continuous(expand = expansion(mult = c(0, 0)), limits = c(0, 40)) +\n\t\tlabs(x = NULL, \n\t\t\t\t y = \"Miles Per Gallon\")\n```\n\n#### Cleveland dot plot\n\n```{r cleveland-dot-plot, fig.height = 5}\nmtcars %>%\n\trownames_to_column(\"model\") %>%\n\tarrange(mpg) %>%\n\tmutate(model = factor(model, levels = .$model)) %>%\n\tggplot(aes(mpg, model)) +\n\t\tgeom_point() +\n\t\tscale_x_continuous(expand = expansion(mult = c(0, 0)), limits = c(0, 40)) +\n\t\tlabs(x = NULL, \n\t\t\t\t y = \"Miles Per Gallon\")\n```\n\n### Dumbell plot\n\n## Scatter Plots\n\n------------------------------------------------------------------------\n\n### One Color Scatter Plot\n\nScatter plots are useful for showing relationships between two or more variables. Use `scatter_grid()` from `library(urbnthemes)` to easily add vertical grid lines for scatter plots.\n\n```{r one-color-scatter-plot}\nmtcars %>%\n  ggplot(mapping = aes(x = wt, y = mpg)) +\n  geom_point() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 6),\n                     breaks = 0:6) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 40),\n                     breaks = 0:8 * 5) +\n  labs(x = \"Weight (thousands of pounds)\",\n       y = \"City MPG\") +\n  scatter_grid()\n```\n\n### High-Density Scatter Plot with Transparency\n\nLarge numbers of observations can sometimes make scatter plots tough to interpret because points overlap. Adding `alpha =` with a number between 0 and 1 adds transparency to points and clarity to plots. Now it's easy to see that jewelry stores are probably rounding up but not rounding down carats!\n\n```{r alpha-scatter-plot}\ndiamonds %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n  geom_point(alpha = 0.05) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 6),\n                     breaks = 0:6) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 20000),\n                     breaks = 0:4 * 5000,\n                     labels = scales::dollar) +\n  labs(x = \"Carat\",\n       y = \"Price\") +\n  scatter_grid()\n```\n\n### Hex Scatter Plot\n\nSometimes transparency isn't enough to bring clarity to a scatter plot with many observations. As n increases into the hundreds of thousands and even millions, `geom_hex` can be one of the best ways to display relationships between two variables.\n\n```{r scatter-plot-hex}\ndiamonds %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n  geom_hex(mapping = aes(fill = after_stat(count))) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 6),\n                     breaks = 0:6) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 20000),\n                     breaks = 0:4 * 5000,\n                     labels = scales::dollar) +\n\tscale_fill_gradientn(labels = scales::comma) +  \n  labs(x = \"Carat\",\n       y = \"Price\") +\n  scatter_grid() +\n  theme(legend.position = \"right\",\n        legend.direction = \"vertical\")\n```\n\n### Scatter Plots With Random Noise {.tabset}\n\nSometimes scatter plots have many overlapping points but a reasonable number of observations. `geom_jitter` adds a small amount of random noise so points are less likely to overlap. `width` and `height` control the amount of noise that is added. In the following before-and-after, notice how many more points are visible after adding jitter.\n\n#### Before\n\n```{r before-scatter-plot}\nmpg %>%\n  ggplot(mapping = aes(x = displ, y = cty)) +\n  geom_point() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 8),\n                     breaks = 0:8) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 40),\n                     breaks = 0:4 * 10) +\n  labs(x = \"Displacement\",\n       y = \"City MPG\") +\n  scatter_grid()\n```\n\n#### After\n\n```{r jitter-plot}\nset.seed(2017)\nmpg %>%\n  ggplot(mapping = aes(x = displ, y = cty)) +\n  geom_jitter() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 8),\n                     breaks = 0:8) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 40),\n                     breaks = 0:4 * 10) +\n  labs(x = \"Displacement\",\n       y = \"City MPG\") +\n  scatter_grid()\n```\n\n### Scatter Plots with Varying Point Size\n\nWeights and populations can be mapped in scatter plots to the size of the points. Here, the number of households in each state is mapped to the size of each point using `aes(size = hhpop)`. Note: `ggplot2::geom_point()` is used instead of `geom_point()`.\n\n```{r geom_point-size, fig.height = 5}\nurbnmapr::statedata %>%\n  ggplot(mapping = aes(x = medhhincome, y = horate)) +\n  ggplot2::geom_point(mapping = aes(size = hhpop), alpha = 0.3) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(30000, 80000),\n                     breaks = 3:8 * 10000,\n                     labels = scales::dollar) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 0.8),\n                     breaks = 0:4 * 0.2) +\n  scale_radius(range = c(3, 15),\n               breaks = c(2500000, 7500000, 12500000), \n               labels = scales::comma) +\n  labs(x = \"Household income\",\n       y = \"Homeownership rate\") +\n  scatter_grid() +\n\ttheme(plot.margin = margin(r = 20))\n```\n\n### Scatter Plots with Fill\n\nA third aesthetic can be added to scatter plots. Here, color signifies the number of cylinders in each car. Before `ggplot()` is called, Cylinders is created using `library(dplyr)` and the piping operator `%>%`.\n\n```{r filled-scatter-plot}\nmtcars %>%\n  mutate(cyl = paste(cyl, \"cylinders\")) %>%\n  ggplot(aes(x = wt, y = mpg, color = cyl)) +\n  geom_point() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 6),\n                     breaks = 0:6) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 40),\n                     breaks = 0:8 * 5) +\n  labs(x = \"Weight (thousands of pounds)\",\n       y = \"City MPG\") +\n  scatter_grid()\n```\n\n## Line Plots\n\n------------------------------------------------------------------------\n\n```{r line-plots}\neconomics %>%\n  ggplot(mapping = aes(x = date, y = unemploy)) +\n  geom_line() +\n  scale_x_date(expand = expansion(mult = c(0.002, 0)), \n               breaks = \"10 years\",\n               limits = c(as.Date(\"1961-01-01\"), as.Date(\"2020-01-01\")),\n               date_labels = \"%Y\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     breaks = 0:4 * 4000,\n                     limits = c(0, 16000),\n                     labels = scales::comma) +\n  labs(x = \"Year\", \n       y = \"Number Unemployed (1,000s)\")\n```\n\n### Lines Plots With Multiple Lines\n\n```{r multiple-line-charts1}\nlibrary(gapminder)\n\ngapminder %>%\n  filter(country %in% c(\"Australia\", \"Canada\", \"New Zealand\")) %>%\n  mutate(country = factor(country, levels = c(\"Canada\", \"Australia\", \"New Zealand\"))) %>%\n  ggplot(aes(year, gdpPercap, color = country)) +\n  geom_line() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     breaks = c(1952 + 0:12 * 5), \n                     limits = c(1952, 2007)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     breaks = 0:8 * 5000,\n                     labels = scales::dollar, \n                     limits = c(0, 40000)) +\n  labs(x = \"Year\",\n       y = \"Per capita GDP (US dollars)\")\n```\n\nPlotting more than one variable can be useful for seeing the relationship of variables over time, but it takes a small amount of data munging.\n\nThis is because `ggplot2` wants data in a \"long\" format instead of a \"wide\" format for line plots with multiple lines. `gather()` and `spread()` from the `tidyr` package make switching back-and-forth between \"long\" and \"wide\" painless. Essentially, variable titles go into \"key\" and variable values go into \"value\". Then ggplot2, turns the different levels of the key variable (population, unemployment) into colors.\n\n```{r multiple-line-charts2}\nas_tibble(EuStockMarkets) %>%\n\tmutate(date = time(EuStockMarkets)) %>%\n\tgather(key = \"key\", value = \"value\", -date) %>%\n\tggplot(mapping = aes(x = date, y = value, color = key)) +\n\tgeom_line() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(1991, 1999), \n                     breaks = c(1991, 1993, 1995, 1997, 1999)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     breaks = 0:4 * 2500,\n                     labels = scales::dollar, \n                     limits = c(0, 10000)) +  \n\tlabs(x = \"Date\",\n\t\t\t y = \"Value\")\n```\n\n### Step plot\n\n`geom_line()` connects coordinates with the shortest possible straight line. Sometimes step plots are necessary because y values don't change between coordinates. For example, the upper-bound of the Federal Funds Rate is set at regular intervals and remains constant until it is changed.\n\n```{r step-plot}\n# downloaded from FRED on 2018-12-06\n\n# https://fred.stlouisfed.org/series/DFEDTARU\n\nfed_fund_rate <- read_csv(\n  \"date, fed_funds_rate\n   2014-01-01,0.0025\n   2015-12-16,0.0050\n   2016-12-14,0.0075\n   2017-03-16,0.0100\n   2017-06-15,0.0125\n   2017-12-14,0.0150\n   2018-03-22,0.0175\n   2018-06-14,0.0200\n   2018-09-27,0.0225\n   2018-12-06,0.0225\")\n\nfed_fund_rate %>%\n  ggplot(mapping = aes(x = date, y = fed_funds_rate)) + \n  geom_step() +\n  scale_x_date(expand = expansion(mult = c(0.002, 0)), \n               breaks = \"1 year\",\n               limits = c(as.Date(\"2014-01-01\"), as.Date(\"2019-01-01\")),\n               date_labels = \"%Y\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     breaks = c(0, 0.01, 0.02, 0.03),\n                     limits = c(0, 0.03),\n                     labels = scales::percent) +  \n\tlabs(x = \"Date\",\n\t\t\t y = \"Upper-bound of the Federal Funds Rate\")\n```\n\n### Path plot\n\nThe Beveridge curve is a macroeconomic plot that displays a relationship between the unemployment rate and the vacancy rate. Movements along the curve indicate changes in the business cyle and horizontal shifts of the curve suggest structural changes in the labor market.\n\nLines in Beveridge curves do not monotonically move from left to right. Therefore, it is necessary to use `geom_path()`.\n\n```{r, path-plot}\n# seasonally-adjusted, quarterly vacancy rate - JOLTS # seasonally-adjusted, quarterly unemployment rate - CPS\n\n# pulled from FRED on April 11, 2018. \n\nlibrary(ggrepel)\n\nbeveridge <- read_csv(\n\t\"quarter, vacanacy_rate, unempoyment_rate\n\t2006-01-01,0.0310,0.0473\n\t2006-04-01,0.0316,0.0463\n\t2006-07-01,0.0313,0.0463\n\t2006-10-01,0.0310,0.0443\n\t2007-01-01,0.0323,0.0450\n\t2007-04-01,0.0326,0.0450\n\t2007-07-01,0.0316,0.0466\n\t2007-10-01,0.0293,0.0480\n\t2008-01-01,0.0286,0.0500\n\t2008-04-01,0.0280,0.0533\n\t2008-07-01,0.0253,0.0600\n\t2008-10-01,0.0220,0.0686\n\t2009-01-01,0.0196,0.0826\n\t2009-04-01,0.0180,0.0930\n\t2009-07-01,0.0176,0.0963\n\t2009-10-01,0.0180,0.0993\n\t2010-01-01,0.0196,0.0983\n\t2010-04-01,0.0220,0.0963\n\t2010-07-01,0.0216,0.0946\n\t2010-10-01,0.0220,0.0950\n\t2011-01-01,0.0226,0.0903\n\t2011-04-01,0.0236,0.0906\n\t2011-07-01,0.0250,0.0900\n\t2011-10-01,0.0243,0.0863\n\t2012-01-01,0.0270,0.0826\n\t2012-04-01,0.0270,0.0820\n\t2012-07-01,0.0266,0.0803\n\t2012-10-01,0.0260,0.0780\n\t2013-01-01,0.0276,0.0773\n\t2013-04-01,0.0280,0.0753\n\t2013-07-01,0.0280,0.0723\n\t2013-10-01,0.0276,0.0693\n\t2014-01-01,0.0290,0.0666\n\t2014-04-01,0.0323,0.0623\n\t2014-07-01,0.0326,0.0610\n\t2014-10-01,0.0330,0.0570\n\t2015-01-01,0.0350,0.0556\n\t2015-04-01,0.0366,0.0540\n\t2015-07-01,0.0373,0.0510\n\t2015-10-01,0.0360,0.0500\n\t2016-01-01,0.0386,0.0493\n\t2016-04-01,0.0383,0.0486\n\t2016-07-01,0.0383,0.0493\n\t2016-10-01,0.0363,0.0473\n\t2017-01-01,0.0366,0.0466\n\t2017-04-01,0.0390,0.0433\n\t2017-07-01,0.0406,0.0430\n\t2017-10-01,0.0386,0.0410\")\n\nlabels <- beveridge %>%\n  filter(lubridate::month(quarter) == 1)\n\nbeveridge %>%\n\tggplot() +\n\tgeom_path(mapping = aes(x = unempoyment_rate, y = vacanacy_rate), alpha = 0.5) +\n  geom_point(data = labels, mapping = aes(x = unempoyment_rate, y = vacanacy_rate)) +\n  geom_text_repel(data = labels, mapping = aes(x = unempoyment_rate, y = vacanacy_rate, label = lubridate::year(quarter))) +  \n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0.04, 0.1),\n                     labels = scales::percent) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     breaks = c(0, 0.01, 0.02, 0.03, 0.04, 0.05),\n                     limits = c(0, 0.05),\n                     labels = scales::percent) +  \n\tlabs(x = \"Seasonally-adjusted unemployment rate\",\n\t\t\t y = \"Seasonally-adjusted vacancy rate\") +  \n  scatter_grid()\n```\n\n### Slope plots\n\n```{r slope-plot, fig.height = 5}\n# https://www.bls.gov/lau/\nlibrary(ggrepel)\n\nunemployment <- tibble(\n\ttime = c(\"October 2009\", \"October 2009\", \"October 2009\", \"August 2017\", \"August 2017\", \"August 2017\"),\n\trate = c(7.4, 7.1, 10.0, 3.9, 3.8, 6.4),\n\tstate = c(\"Maryland\", \"Virginia\", \"Washington, D.C.\", \"Maryland\", \"Virginia\", \"Washington, D.C.\")\n)\n\nlabel <- tibble(label = c(\"October 2009\", \"August 2017\"))\noctober <- filter(unemployment, time == \"October 2009\")\naugust <- filter(unemployment, time == \"August 2017\")\n\nunemployment %>%\n\tmutate(time = factor(time, levels = c(\"October 2009\", \"August 2017\")),\n\t       state = factor(state, levels = c(\"Washington, D.C.\", \"Maryland\", \"Virginia\"))) %>%\n\tggplot() + \n\tgeom_line(aes(time, rate, group = state, color = state), show.legend = FALSE) +\n\tgeom_point(aes(x = time, y = rate, color = state)) +\n\tlabs(subtitle = \"Unemployment Rate\") +\n\ttheme(axis.ticks.x = element_blank(),\n\t\t\t\taxis.title.x = element_blank(),\n\t\t\t\taxis.ticks.y = element_blank(),\n        axis.title.y = element_blank(), \n        axis.text.y = element_blank(),\n\t\t\t\tpanel.grid.major.y = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.x = element_blank(),\n\t\t\t\taxis.line = element_blank()) +\n\tgeom_text_repel(data = october, mapping = aes(x = time, y = rate, label = as.character(rate)), nudge_x = -0.06) + \n\tgeom_text_repel(data = august, mapping = aes(x = time, y = rate, label = as.character(rate)), nudge_x = 0.06)\n```\n\n## Univariate\n\n------------------------------------------------------------------------\n\nThere are a number of ways to explore the distributions of univariate data in R. Some methods, like strip charts, show all data points. Other methods, like the box and whisker plot, show selected data points that communicate key values like the median and 25th percentile. Finally, some methods don't show any of the underlying data but calculate density estimates. Each method has advantages and disadvantages, so it is worthwhile to understand the different forms. For more information, read [40 years of boxplots](http://vita.had.co.nz/papers/boxplots.pdf) by Hadley Wickham and Lisa Stryjewski.\n\n### Strip Chart\n\nStrip charts, the simplest univariate plot, show the distribution of values along one axis. Strip charts work best with variables that have plenty of variation. If not, the points tend to cluster on top of each other. Even if the variable has plenty of variation, it is often important to add transparency to the points with `alpha =` so overlapping values are visible.\n\n```{r stripchart, fig.height=2}\nmsleep %>%\n  ggplot(aes(x = sleep_total, y = factor(1))) +\n  geom_point(alpha = 0.2, size = 5) +\n  labs(y = NULL) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 25), \n                     breaks = 0:5 * 5) +\n  scale_y_discrete(labels = NULL) +\n  labs(title = \"Total Sleep Time of Different Mammals\",\n       x = \"Total sleep time (hours)\",\n       y = NULL) +\n  theme(axis.ticks.y = element_blank())\n```\n\n### Strip Chart with Highlighting\n\nBecause strip charts show all values, they are useful for showing where selected points lie in the distribution of a variable. The clearest way to do this is by adding `geom_point()` twice with `filter()` in the data argument. This way, the highlighted values show up on top of unhighlighted values.\n\n```{r stripchart-with-highlighting, fig.height=2}\nggplot() +\n  geom_point(data = filter(msleep, name != \"Red fox\"), \n                    aes(x = sleep_total, \n                        y = factor(1)),\n             alpha = 0.2, \n             size = 5,\n  \t\t\t\t\t color = \"grey50\") +\n  geom_point(data = filter(msleep, name == \"Red fox\"),\n             aes(x = sleep_total, \n                 y = factor(1), \n                 color = name),\n             alpha = 0.8,\n             size = 5) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 25), \n                     breaks = 0:5 * 5) +  \n  scale_y_discrete(labels = NULL) +\n  labs(title = \"Total Sleep Time of Different Mammals\",\n       x = \"Total sleep time (hours)\",\n       y = NULL,\n       legend) +\n  guides(color = guide_legend(title = NULL)) +\n  theme(axis.ticks.y = element_blank())\n```\n\n### Subsetted Strip Chart\n\nAdd a y variable to see the distributions of the continuous variable in subsets of a categorical variable.\n\n```{r subsetted-stripchart, fig.height=3}\nlibrary(forcats)\n\nmsleep %>%\n  filter(!is.na(vore)) %>%\n  mutate(vore = fct_recode(vore, \n                            \"Insectivore\" = \"insecti\",\n                            \"Omnivore\" = \"omni\", \n                            \"Herbivore\" = \"herbi\", \n                            \"Carnivore\" = \"carni\"\n                            )) %>%\n  ggplot(aes(x = sleep_total, y = vore)) +\n  geom_point(alpha = 0.2, size = 5) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 25), \n                     breaks = 0:5 * 5) +  \n  labs(title = \"Total Sleep Time of Different Mammals by Diet\",\n       x = \"Total sleep time (hours)\",\n       y = NULL) +\n  theme(axis.ticks.y = element_blank())\n```\n\n### Beeswarm Plots\n\nBeesward plots are a variation of strip charts that shows the distribution of data, but without the points overlaping.\n\n```{r beeswarm}\nlibrary(ggbeeswarm)\n\ntxhousing %>%\n\tfilter(city %in% c(\"Austin\",\"Houston\",\"Dallas\",\"San Antonio\",\"Fort Worth\")) %>% \n  ggplot(aes(x = median, y = city)) +\n  geom_beeswarm(alpha = 0.2, size = 5) + \n\tscale_x_continuous(labels = scales::dollar) +\n  labs(title = \"Household Sale Price by City\",\n       x = \"Sale Price\",\n       y = NULL) +\n  theme(axis.ticks.y = element_blank())\n\n```\n\n### Histograms\n\nHistograms divide the distribution of a variable into n equal-sized bins and then count and display the number of observations in each bin. Histograms are sensitive to bin width. As `?geom_histogram` notes, \"You should always override \\[the default binwidth\\] value, exploring multiple widths to find the best to illustrate the stories in your data.\"\n\n```{r histogram}\nggplot(data = diamonds, mapping = aes(x = depth)) + \n  geom_histogram(bins = 100) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, 100)) +  \n  scale_y_continuous(expand = expansion(mult = c(0, 0.2)), labels = scales::comma) +\n  labs(x = \"Depth\",\n       y = \"Count\")\n```\n\n### Boxplots\n\nBoxplots were invented in the 1970s by John Tukey[^1]. Instead of showing the underlying data or binned counts of the underlying data, they focus on important values like the 25th percentile, median, and 75th percentile.\n\n[^1]: Wickham, H., & Stryjewski, L. (2011). 40 years of boxplots.\n\n```{r box-plot}\nInsectSprays %>%\n  ggplot(mapping =  aes(x = spray, y = count)) +\n  geom_boxplot() +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  labs(x = \"Type of insect spray\",\n       y = \"Number of dead insects\") +\n  remove_ticks()\n```\n\n### Smoothed Kernel Density Plots\n\nContinuous variables with smooth distributions are sometimes better represented with smoothed kernel density estimates than histograms or boxplots. `geom_density()` computes and plots a kernel density estimate. Notice the lumps around integers and halves in the following distribution because of rounding.\n\n```{r kernel-density-plot}\ndiamonds %>%\n  ggplot(mapping = aes(carat)) +\n  geom_density(color = NA) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, NA)) +\n\tscale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  labs(x = \"Carat\",\n       y = \"Density\")\n```\n\n```{r kernel-density-plot-filled}\ndiamonds %>%\n  mutate(cost = ifelse(price > 5500, \"More than $5,500 +\", \"$0 to $5,500\")) %>%\n  ggplot(mapping = aes(carat, fill = cost)) +\n  geom_density(alpha = 0.25, color = NA) +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(0, NA)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Carat\",\n       y = \"Density\")\n```\n\n### Ridgeline Plots\n\nRidgeline plots are partially overlapping smoothed kernel density plots faceted by a categorical variable that pack a lot of information into one elegant plot.\n\n```{r ridgeline-plots}\nlibrary(ggridges)\n\nggplot(diamonds, mapping = aes(x = price, y = cut)) +\n\tgeom_density_ridges(fill = \"#1696d2\") +\n  labs(x = \"Price\",\n       y = \"Cut\")\n```\n\n### Violin Plots\n\nViolin plots are symmetrical displays of smooth kernel density plots.\n\n```{r violin-plot}\nInsectSprays %>%\n  ggplot(mapping = aes(x = spray, y = count, fill = spray)) +\n  geom_violin(color = NA) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  labs(x = \"Type of insect spray\",\n       y = \"Number of dead insects\") +\n  remove_ticks()\n```\n\n### Bean Plot\n\nIndividual outliers and important summary values are not visible in violin plots or smoothed kernel density plots. Bean plots, [created by Peter Kampstra in 2008](https://www.jstatsoft.org/article/view/v028c01), are violin plots with data shown as small lines in a one-dimensional sstrip plot and larger lines for the mean.\n\n```{r beanplot}\nmsleep %>%\n  filter(!is.na(vore)) %>%\n  mutate(vore = fct_recode(vore, \n                            \"Insectivore\" = \"insecti\",\n                            \"Omnivore\" = \"omni\", \n                            \"Herbivore\" = \"herbi\", \n                            \"Carnivore\" = \"carni\"\n                            )) %>%\n  ggplot(aes(x = vore, y = sleep_total, fill = vore)) +\n  stat_summary(fun = \"mean\",\n               colour = \"black\", \n               size = 30,\n               shape = 95,\n               geom = \"point\") +\n  geom_violin(color = NA) +\n  geom_jitter(width = 0,\n              height = 0.05,\n              alpha = 0.4,\n              shape = \"-\",\n              size = 10,\n  \t\t\t\t\t\tcolor = \"grey50\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +  \n    labs(x = NULL,\n         y = \"Total sleep time (hours)\") +\n  theme(legend.position = \"none\") +\n  remove_ticks()\n```\n\n## Area Plot\n\n------------------------------------------------------------------------\n\n### Stacked Area\n\n```{r area-plot-stack}\ntxhousing %>%\n  filter(city %in% c(\"Austin\",\"Houston\",\"Dallas\",\"San Antonio\",\"Fort Worth\")) %>%\n  group_by(city, year) %>%\n  summarize(sales = sum(sales)) %>%\n  ggplot(aes(x = year, y = sales, fill = city)) +\n  geom_area(position = \"stack\") +\n  scale_x_continuous(expand = expansion(mult = c(0, 0)),\n                     limits = c(2000, 2015),\n                     breaks = 2000 + 0:15) +  \n  scale_y_continuous(expand = expansion(mult = c(0, 0.2)), \n                     labels = scales::comma) +\n  labs(x = \"Year\",\n       y = \"Home sales\")\n```\n\n### Filled Area\n\n```{r area-plot-fill}\ntxhousing %>%\n  filter(city %in% c(\"Austin\",\"Houston\",\"Dallas\",\"San Antonio\",\"Fort Worth\")) %>%\n  group_by(city, year) %>%\n  summarize(sales = sum(sales)) %>%\n  ggplot(aes(x = year, y = sales, fill = city)) +\n  geom_area(position = \"fill\") +\n  scale_x_continuous(expand = expansion(mult = c(0, 0)),\n                     limits = c(2000, 2015),\n                     breaks = 2000 + 0:15) +  \n  scale_y_continuous(expand = expansion(mult = c(0, 0.02)),\n                     breaks = c(0, 0.25, 0.5, 0.75, 1),\n                     labels = scales::percent) +\n  labs(x = \"Year\",\n       y = \"Home sales\")\n```\n\n## Sankey Plot\n\n------------------------------------------------------------------------\n\nSankey plots visualize flows from one set of variables to another. This can be useful for showing outcomes from the start of a program to the end. You'll need to install the `ggsankey` package to create Sankey plots in R. In this example I make a dummy data set of housing status prior to program start and at exit to show the flow of people between outcomes. A key step is to transform your data set using the `make_long` function from the package. This creates a data frame that specifies each of the initial nodes and how they flow into the next stage.\n\n```{r}\n# load ggsankey package\nremotes::install_github(\"davidsjoberg/ggsankey\")\nlibrary(ggsankey)\n\n# create a dummy dataset of housing status\ndf <- data_frame(entry_status = c(rep(\"Housed\", 7), rep(\"Unhoused\", 15), rep(\"Staying w/ Family\", 8)), \n                 exit_status = c(rep(\"Housed\", 15), rep(\"Unhoused\", 2), rep(\"Staying w/ Family\", 13))) %>% \n\t# transform the data frame into the proper format for the sankey plot\n  make_long(entry_status, exit_status) %>% \n\t# recode the labels to be cleaner in the plot \n  mutate(x = recode(x, entry_status = \"Prior Housing Status\", exit_status = \"Exit Housing Status\"),\n         next_x = recode(next_x, entry_status = \"Prior Housing Status\", exit_status = \"Exit Housing Status\"))\n\n# create sankey plot\nggplot(df, aes(x = x, \n               next_x = next_x, \n               node = node, \n               next_node = next_node,\n               fill = factor(node), \n               label = node)) +\n  geom_sankey(flow.alpha = 0.5, node.color = 1, show.legend = FALSE) +\n  # add labels to plot and style\n  geom_sankey_label(size = 3.5, color = 1, fill = \"white\") +\n  theme_sankey(base_size = 16)+\n  labs(x = NULL)\n```\n\n## Heat Map\n\n------------------------------------------------------------------------\n\n```{r heat-map}\nlibrary(fivethirtyeight)\n\nbad_drivers %>%\n  filter(state %in% c(\"Maine\", \"New Hampshire\", \"Vermont\", \"Massachusetts\", \"Connecticut\", \"New York\")) %>%\n  mutate(`Number of\\nDrivers` = scale(num_drivers),\n         `Percent\\nSpeeding` = scale(perc_speeding),\n         `Percent\\nAlcohol` = scale(perc_alcohol),\n         `Percent Not\\nDistracted` = scale(perc_not_distracted),\n         `Percent No\\nPrevious` = scale(perc_no_previous),\n         state = factor(state, levels = rev(state))\n         ) %>%\n  select(-insurance_premiums, -losses, -(num_drivers:losses)) %>%\n  gather(`Number of\\nDrivers`:`Percent No\\nPrevious`, key = \"variable\", value = \"SD's from Mean\") %>%\n  ggplot(aes(variable, state)) +\n    geom_tile(aes(fill = `SD's from Mean`)) +\n    labs(x = NULL,\n         y = NULL) + \n    scale_fill_gradientn() +\n    theme(legend.position = \"right\",\n          legend.direction = \"vertical\",\n          axis.line.x = element_blank(),\n          panel.grid.major.y = element_blank()) +\n  remove_ticks()\n#https://learnr.wordpress.com/2010/01/26/ggplot2-quick-heatmap-plotting/\n```\n\n## Faceting and Small Multiples\n\n------------------------------------------------------------------------\n\n### facet_wrap()\n\nR's faceting system is a powerful way to make \"small multiples\".\n\nSome edits to the theme may be necessary depending upon how many rows and columns are in the plot.\n\n```{r small-multiples, fig.height=2}\ndiamonds %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n  geom_point(alpha = 0.05) +\n  facet_wrap(~cut, ncol = 5) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0)),\n                     limits = c(0, 6)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0)),\n                     limits = c(0, 20000), \n                     labels = scales::dollar) +\n  labs(x = \"Carat\",\n       y = \"Price\") +\n  scatter_grid()\n```\n\n### facet_grid()\n\n```{r faceting, fig.height=7}\ndiamonds %>%\n  filter(color %in% c(\"D\", \"E\", \"F\", \"G\")) %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n  geom_point(alpha = 0.05) +\n  facet_grid(color ~ cut) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0)),\n                     limits = c(0, 4)) +  \n  scale_y_continuous(expand = expansion(mult = c(0, 0)),\n                     limits = c(0, 20000), \n                     labels = scales::dollar) +\n  labs(x = \"Carat\",\n       y = \"Price\") +\n  theme(panel.spacing = unit(20L, \"pt\")) +\n  scatter_grid()\n```\n\n## Smoothers\n\n------------------------------------------------------------------------\n\n`geom_smooth()` fits and plots models to data with two or more dimensions.\n\nUnderstanding and manipulating defaults is more important for `geom_smooth()` than other geoms because it contains a number of assumptions. `geom_smooth()` automatically uses loess for datasets with fewer than 1,000 observations and a generalized additive model with `formula = y ~ s(x, bs = \"cs\")` for datasets with greater than 1,000 observations. Both default to a 95% confidence interval with the confidence interval displayed.\n\nModels are chosen with `method =` and can be set to lm(), glm(), gam(), loess(), rlm(), and more. Formulas can be specified with `formula =` and `y ~ x` syntax. Plotting the standard error is toggled with `se = TRUE` and `se = FALSE`, and level is specificed with `level =`. As always, more information can be seen in RStudio with `?geom_smooth()`.\n\n`geom_point()` adds a scatterplot to `geom_smooth()`. The order of the function calls is important. The function called second will be layed on top of the function called first.\n\n```{r geom_smooth}\ndiamonds %>%\n  ggplot(mapping = aes(x = carat, y = price)) +\n\tgeom_point(alpha = 0.05) +\n\tgeom_smooth(color =  \"#ec008b\") +\n\tscale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n\t                   limits = c(0, 5),\n\t                   breaks = 0:5) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n                     limits = c(0, 20000), \n                     labels = scales::dollar) +  \n  labs(x = \"Carat\",\n       y = \"Price\") +\n  scatter_grid()\n```\n\n`geom_smooth` can be subset by categorical and factor variables. This requires subgroups to have a decent number of observations and and a fair amount of variability across the x-axis. Confidence intervals often widen at the ends so special care is needed for the chart to be meaningful and readable.\n\nThis example uses Loess with MPG = displacement.\n\n```{r subset-geom_smooth}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = factor(cyl))) +\n\tgeom_point(alpha = 0.2) +\n\tgeom_smooth() +\n\tscale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n\t                   limits = c(0, 7),\n\t                   breaks = 0:7) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n                     limits = c(0, 60)) +  \n\tlabs(x = \"Engine displacement\",\n\t\t\t y = \"Highway MPG\") +\n  scatter_grid()\n```\n\nThis example uses linear models with MPG = displacement.\n\n```{r subset-geom-smooth-lm}\nggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = factor(cyl))) +\n\tgeom_point(alpha = 0.2) +\n\tgeom_smooth(method = \"lm\") +\n\tscale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n\t                   limits = c(0, 7),\n\t                   breaks = 0:7) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n                     limits = c(0, 60)) +  \n\tlabs(x = \"Engine displacement\",\n\t\t\t y = \"Highway MPG\") +\n  scatter_grid()\n```\n\n## Highlighting\n\n------------------------------------------------------------------------\n\n[`library(gghighlight)`](https://yutannihilation.github.io/gghighlight/) enables the intuitive highlighting of ggplot2 plots. `gghighlight` modifies existing ggplot2 objects, so no other code should change. All of the highlighting is handled by the function `gghighlight()`, which can handle all types of geoms.\n\n*Warning:* R will throw an error if too many colors are highlighted because of the design of `urbnthemes`. Simply decrease the number of highlighted geoms to solve this issue.\n\nThere are two main ways to highlight.\n\n### Threshold\n\nThe first way to highlight is with a threshold. Add a logical test to `gghighlight()` to describe which lines should be highlighted. Here, lines with maximum change in per-capita Gross Domestic Product greater than \\$35,000 are highlighted by `gghighlight(max(pcgpd_change) > 35000, use_direct_label = FALSE)`.\n\n```{r gghighlight-threshold}\nlibrary(gghighlight)\nlibrary(gapminder)\n\ndata <- gapminder %>%\n  filter(continent %in% c(\"Europe\")) %>%\n  group_by(country) %>%\n  mutate(pcgpd_change = ifelse(year == 1952, 0, gdpPercap - lag(gdpPercap))) %>%\n  mutate(pcgpd_change = cumsum(pcgpd_change))\n  \ndata %>%\n  ggplot(aes(year, pcgpd_change, group = country, color = country)) +\n  geom_line() +\n  gghighlight(max(pcgpd_change) > 35000, use_direct_label = FALSE) +  \n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)),\n                     breaks = c(seq(1950, 2010, 10)),\n                     limits = c(1950, 2010)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n                     breaks = 0:8 * 5000,\n                     labels = scales::dollar,\n                     limits = c(0, 40000)) +\n  labs(x = \"Year\",\n       y = \"Change in per-capita GDP (US dollars)\")\n```\n\n### Rank\n\nThe second way to highlight is by rank. Here, the countries with the first highest values for change in per-capita Gross Domestic Product are highlighted with `gghighlight(max(pcgpd_change), max_highlight = 5, use_direct_label = FALSE)`.\n\n```{r gghighlight-rank}\ndata %>%\n  ggplot(aes(year, pcgpd_change, group = country, color = country)) +\n  geom_line() +\n  gghighlight(max(pcgpd_change), max_highlight = 5, use_direct_label = FALSE) +  \n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)),\n                     breaks = c(seq(1950, 2010, 10)),\n                     limits = c(1950, 2010)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n                     breaks = 0:8 * 5000,\n                     labels = scales::dollar,\n                     limits = c(0, 40000)) +\n  labs(x = \"Year\",\n       y = \"Change in per-capita GDP (US dollars)\")\n```\n\n### Faceting\n\n`gghighlight()` works well with ggplot2's faceting system.\n\n```{r gghighlight-faceting}\ndata %>%\n  ggplot(aes(year, pcgpd_change, group = country)) +\n  geom_line() +\n  gghighlight(max(pcgpd_change), max_highlight = 4, use_direct_label = FALSE) +  \n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)),\n                     breaks = c(seq(1950, 2010, 10)),\n                     limits = c(1950, 2010)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n                     breaks = 0:8 * 5000,\n                     labels = scales::dollar,\n                     limits = c(0, 40000)) +\n  labs(x = \"Year\",\n       y = \"Change in per-capita GDP (US dollars)\") +\n  facet_wrap(~ country) +\n  theme(panel.spacing = unit(20L, \"pt\"))\n```\n\n## Text and Annotation\n\n------------------------------------------------------------------------\n\nSeveral functions can be used to annotate, label, and highlight different parts of plots. `geom_text()` and `geom_text_repel()` both display variables from data frames. `annotate()`, which has several different uses, displays variables and values included in the function call.\n\n### geom_text()\n\n`geom_text()` turns text variables in data sets into geometric objects. This is useful for labeling data in plots. Both functions need `x` values and `y` values to determine placement on the coordinate plane, and a text vector of labels.\n\nThis can be used to label `geom_bar()`.\n\n```{r bar-geom_text}\ndiamonds %>%\n  group_by(cut) %>%\n  summarize(price = mean(price)) %>%\n  ggplot(aes(cut, price)) +\n  geom_bar(stat = \"identity\") +\n  geom_text(aes(label = scales::dollar(price)), vjust = -1) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2)),\n  \t\t\t\t\t\t\t\t\t labels = scales::dollar) +\n  labs(title = \"Average Diamond Price by Diamond Cut\",\n       x = \"Cut\",\n       y = \"Price\") +\n  remove_ticks()\n```\n\nIt can also be used to label points in a scatter plot.\n\nIt's rarely useful to label every point in a scatter plot. Use `filter()` to create a second data set that is subsetted and pass it into the labelling function.\n\n```{r scatterplot-geom_text}\nlabels <- mtcars %>%\n\trownames_to_column(\"model\") %>%\n\tfilter(model %in% c(\"Toyota Corolla\", \"Merc 240D\", \"Datsun 710\"))\n\nmtcars %>%\n\tggplot() +\n\tgeom_point(mapping = aes(x = wt, y = mpg)) +\n\tgeom_text(data = labels, mapping = aes(x = wt, y = mpg, label = model), nudge_x = 0.38) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 6)) + \n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 40)) +  \n  labs(x = \"Weight (Tons)\",\n       y = \"Miles per gallon (MPG)\") +\n  scatter_grid()\n```\n\nText too often overlaps with other text or geoms when using `geom_text()`. `library(ggrepel)` is a `library(ggplot2)` add-on that automatically positions text so it doesn't overlap with geoms or other text. To add this functionality, install and load `library(ggrepel)` and then use `geom_text_repel()` with the same syntax as `geom_text()`.\n\n### geom_text_repel()\n\n```{r scatterplot-geom_text_repel}\nlibrary(ggrepel)\n\nlabels <- mtcars %>%\n\trownames_to_column(\"model\") %>%\n\ttop_n(5, mpg)\n\nmtcars %>%\n\tggplot(mapping = aes(x = wt, y = mpg)) +\n\tgeom_point() +\n\tgeom_text_repel(data = labels, \n\t                mapping = aes(label = model), \n\t                nudge_x = 0.38) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 6)) + \n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 40)) +  \n  labs(x = \"Weight (Tons)\",\n       y = \"Miles per gallon (MPG)\") +\n  scatter_grid()\n```\n\n### annotate()\n\n`annotate()` doesn't use data frames. Instead, it takes values for `x =` and `y =`. It can add text, rectangles, segments, and pointrange.\n\n```{r annotate-point}\nmsleep %>%\n  filter(bodywt <= 1000) %>%\n  ggplot(aes(bodywt, sleep_total)) +\n  geom_point() +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(-10, 1000),\n  \t\t\t\t\t\t\t\t\t labels = scales::comma) + \n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 25)) +  \n  annotate(\"text\", x = 500, y = 12, label = \"These data suggest that heavy \\n animals sleep less than light animals\") +\n  labs(x = \"Body weight (pounds)\",\n       y = \"Sleep time (hours)\") +\n  scatter_grid()  \n```\n\n```{r annotate-rect}\nlibrary(AmesHousing)\n\names <- make_ames()\n\names %>%\n  mutate(square_footage = Total_Bsmt_SF - Bsmt_Unf_SF + First_Flr_SF + Second_Flr_SF) %>%\n  mutate(Sale_Price = Sale_Price / 1000) %>%  \n  ggplot(aes(square_footage, Sale_Price)) +\n  geom_point(alpha = 0.2) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(-10, 12000),\n  \t\t\t\t\t\t\t\t\t labels = scales::comma) + \n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 800),\n  \t\t\t\t\t\t\t\t\t labels = scales::dollar) +  \n  annotate(\"rect\", xmin = 6800, xmax = 11500, ymin = 145, ymax = 210, alpha = 0.1) +\n  annotate(\"text\", x = 8750, y = 230, label = \"Unfinished homes\") +\n  labs(x = \"Square footage\", \n       y = \"Sale price (thousands)\") +\n  scatter_grid()   \n```\n\n## Layered Geoms\n\n------------------------------------------------------------------------\n\nGeoms can be layered in `ggplot2`. This is useful for design and analysis.\n\nIt is often useful to add points to line plots with a small number of values across the x-axis. This example from [R for Data Science](http://r4ds.had.co.nz/tidy-data.html) shows how changing the line to grey can be appealing.\n\n### Design {.tabset}\n\n#### Before\n\n```{r layering-geoms-design}\ntable1 %>%\n\tggplot(aes(x = year, y = cases)) +\n\t\tgeom_line(aes(color = country)) +\n\t\tgeom_point(aes(color = country)) +\n\t\tscale_y_continuous(expand = expansion(mult = c(0, 0.2)), \n\t\t                   labels = scales::comma) +\n\t\tscale_x_continuous(breaks = c(1999, 2000)) +\n\t\tlabs(title = \"Changes in Tuberculosis Cases in Three Countries\")\n```\n\n#### After\n\n```{r layering-geoms-design-gray}\ntable1 %>%\n\tggplot(aes(year, cases)) +\n\t\tgeom_line(aes(group = country), color = \"grey50\") +\n\t\tgeom_point(aes(color = country)) +\n\t\tscale_y_continuous(expand = expansion(mult = c(0, 0.2)), \n\t\t                   labels = scales::comma) +\n\t\tscale_x_continuous(breaks = c(1999, 2000)) +\n\t\tlabs(title = \"Changes in Tuberculosis Cases in Three Countries\")\n```\n\n### Centroids\n\n```{r centroids}\nmpg_summary <- mpg %>%\n\tgroup_by(cyl) %>%\n\tsummarize(displ = mean(displ), cty = mean(cty))\n\nmpg %>%\n\tggplot() +\n\tgeom_point(aes(x = displ, y = cty, color = factor(cyl)), alpha = 0.5) +\n\tgeom_point(data = mpg_summary, aes(x = displ, y = cty), size = 5, color = \"#ec008b\") +\n\tgeom_text(data = mpg_summary, aes(x = displ, y = cty, label = cyl)) +\n  scale_x_continuous(expand = expansion(mult = c(0, 0.002)), \n                     limits = c(0, 8)) +  \n  scale_y_continuous(expand = expansion(mult = c(0, 0)), \n                     limits = c(0, 40)) +\n\tlabs(x = \"Displacement\",\n\t     y = \"City MPG\") +\n  scatter_grid()\n```\n\n## Saving Plots\n\n------------------------------------------------------------------------\n\n`ggsave()` exports ggplot2 plots. The function can be used in two ways. If `plot =` isn't specified in the function call, then `ggsave()` automatically saves the plot that was last displayed in the Viewer window. Second, if `plot =` is specified, then `ggsave()` saves the specified plot. `ggsave()` guesses the type of graphics device to use in export (.png, .pdf, .svg, etc.) from the file extension in the filename.\n\n```         \nmtcars %>%\n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point()\n\nggsave(filename = \"cars.png\")\n\nplot2 <- mtcars %>%\n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point()\n\nggsave(filename = \"cars.png\", plot = plot2)\n```\n\nExported plots rarely look identical to the plots that show up in the Viewer window in RStudio because the overall size and aspect ratio of the Viewer is often different than the defaults for `ggsave()`. Specific sizes, aspect ratios, and resolutions can be controlled with arguments in `ggsave()`. RStudio has a useful [cheatsheet](https://www.rstudio.com/resources/cheatsheets/) called \"How Big is Your Graph?\" that should help with choosing the best size, aspect ratio, and resolution.\n\nFonts are not embedded in PDFs by default. To embed fonts in PDFs, include `device = cairo_pdf` in `ggsave()`.\n\n```         \nplot <- mtcars %>%\n  ggplot(aes(x = wt, y = mpg)) +\n  geom_point()\n\nggsave(filename = \"cars.pdf\", plot = plot2, width = 6.5, height = 4, device = cairo_pdf)\n```\n\n## Interactive Plots\n\nWe can make any of the previous plots interactive with the powerful and easy `plotly` library. All we have to do is wrap a ggplot object in the `ggplotly` function. *Note:* You can't add `ggplotly` to the end of a ggplot object, but have to actually save the ggplot as a variable and then wrap that in the function call as shown below.\n\nYou can customize the tooltip text by adding a value to `text` in `aes()` and then specifying `tooltip = \"text\"` in the `ggplotly` call.\n\n```{r}\nlibrary(plotly)\n\nstock_plot <- as_tibble(EuStockMarkets) %>% \n    mutate(date = time(EuStockMarkets)) %>% \n    gather(key = \"key\", value = \"value\", -date) %>% \n    ggplot(mapping = aes(x = date, y = value, color = key,\n    \t\t\t\t\t\t\t\t\t\t # sometimes ggplotly messes with line charts,\n    \t\t\t\t\t\t\t\t\t\t # adding a group value usually helps with that\n    \t\t\t\t\t\t\t\t\t\t group = key,\n    \t\t\t\t\t\t\t\t\t\t # customize the tooltip with the text aes\n    \t\t\t\t\t\t\t\t\t\t text = paste0(\"Value: \", round(value, 2), \"<br>\",\n    \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\"Date: \", round(date, 3), \"<br>\",\n    \t\t\t\t\t\t\t\t\t\t \t\t\t\t\t\t\t\"Key: \", key))\n    \t\t\t\t\t\t\t\t\t\t ) +\n    geom_line() +\n  scale_x_continuous(expand = expansion(mult = c(0.002, 0)), \n                     limits = c(1991, 1999), \n                     breaks = c(1991, 1993, 1995, 1997, 1999)) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.002)), \n                     breaks = 0:4 * 2500,\n                     labels = scales::dollar, \n                     limits = c(0, 10000)) +  \n    labs(x = \"Date\",\n             y = \"Value\")\n\n# make interactive with gggplotly\n# Uncomment pipe to hide the interative toolbar in the top right \nggplotly(stock_plot, tooltip = \"text\")  # %>%  config(displayModeBar = FALSE)\n```\n\n## urbnthemes\n\n### Overview\n\n`urbnthemes` is a set of tools for creating Urban Institute-themed plots and maps in R. The package extends `ggplot2` with print and map themes as well as tools that make plotting easier at the Urban Institute. `urbnthemes` replaces the [urban_R_theme](https://github.com/UrbanInstitute/urban_R_theme).\n\nAlways load `library(urbnthemes)` after `library(ggplot2)` or `library(tidyverse)`.\n\n### Usage\n\nUse `set_urbn_defaults(style = \"print\")` to set the default styles. `scatter_grid()`, `remove_ticks()`, `add_axis()`, and `remove_axis()` can all be used to improve graphics.\n\n```{r example, message=FALSE}\nlibrary(ggplot2)\nlibrary(urbnthemes)\n\nset_urbn_defaults(style = \"print\")\n\nggplot(data = mtcars, mapping = aes(factor(cyl))) +\n  geom_bar() + \n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Number of Cylinders\",\n       y = \"Count\") +\n  remove_ticks()\n```\n\n### Combining elements\n\n`library(urbnthemes)` contains functions for combining plot elements into graphics. `urbn_plot()` brings all of the elements together.\n\n-   `urbn_logo_text()`\n-   `remove_ticks()`\n-   `remove_axis()`\n-   `scatter_grid()`\n-   `add_axis()`\n-   `urbn_geofacet`\n\n```{r example2}\nlibrary(ggplot2)\nlibrary(urbnthemes)\n\nset_urbn_defaults(style = \"print\")\n\nplot <- ggplot(data = mtcars, mapping = aes(factor(cyl))) +\n  geom_bar() + \n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  labs(x = \"Number of Cylinders\",\n       y = \"Count\") +\n  remove_ticks()\n\nurbn_plot(plot, urbn_logo_text(), ncol = 1, heights = c(30, 1))\n```\n\nSometimes it's important to horizontally add the y-axis title above the plot. `urbn_y_title()` can be sued for this task. The following example goes one step further and adds the title between the legend and the plot.\n\n```{r}\nlibrary(ggplot2)\nlibrary(urbnthemes)\n\nset_urbn_defaults()\n\nplot <- ggplot(data = mtcars, mapping = aes(x = wt, y = mpg, color = factor(cyl))) +\n  geom_point() + \n\tscale_x_continuous(expand = c(0, 0),\n\t\t\t\t\t\t\t\t\t\t limits = c(0, 8)) +\n  scale_y_continuous(expand = c(0, 0),\n  \t\t\t\t\t\t\t\t\t limits = c(0, 40)) +\n  remove_ticks() +\n\tlabs(\"\") +\n\tscatter_grid()\n\nurbn_plot(get_legend(plot),\n\t\t\t\t\turbn_y_title(\"Miles per gallon\"),\n\t\t\t\t\tremove_legend(plot), \n\t\t\t\t\turbn_logo_text(), \n\t\t\t\t\tncol = 1, \n\t\t\t\t\theights = c(3, 1, 30, 1))\n```\n\n### Palettes\n\n`urbnthemes` contains many quick-access color palettes from the [Urban Institute Data Visualization Style Guide](http://urbaninstitute.github.io/graphics-styleguide/). These palettes can be used to quickly overwrite default color palettes from `urbnthemes`.\n\n-   `palette_urbn_main` is the eight color discrete palette of the Urban Institute with cyan, yellow, black, gray, magenta, green, space gray, and red.\n-   `palette_urbn_diverging` is an eight color diverging palette.\n-   `palette_urbn_quintile` is a five color blue palette that is good for quintiles.\n-   `palette_urbn_politics` is a two color palette with blue for Democrats and red for Republicans.\n\nThere are seven palettes that are continuous palettes of the seven unique colors in the discrete Urban Institute color palette:\n\n-   `palette_urbn_cyan`\n-   `palette_urbn_gray`\n-   `palette_urbn_yellow`\n-   `palette_urbn_magenta`\n-   `palette_urbn_green`\n-   `palette_urbn_spacegray`\n-   `palette_urbn_red`\n\nUse `view_palette()` to see the palette:\n\n```{r view-palette}\nview_palette(palette_urbn_magenta)\n```\n\nThe vectors can be subset using base R syntax. This allows for the quick selection of specific colors from a palette.\n\n```{r palette-subset1}\npalette_urbn_main[1:4]\n```\n\n```{r palette-subset2}\npalette_urbn_spacegray[1:5]\n```\n\n### Utility functions\n\n`library(urbnthemes)` contains four functions that are helpful with managing font instalations:\n\n-   `lato_test()`\n-   `lato_install()`\n-   `fontawesome_test()`\n-   `fontawesome_install()`\n\n## Bibliography and Session Information\n\n------------------------------------------------------------------------\n\n*Note:* Examples present in [this document](https://awunderground.github.io/ggplot2-themes/) by Aaron Williams were created during personal time.\n\nBob Rudis and Dave Gandy (2017). waffle: Create Waffle Chart Visualizations in R. R package version 0.7.0. https://CRAN.R-project.org/package=waffle\n\nChester Ismay and Jennifer Chunn (2017). fivethirtyeight: Data and Code Behind the Stories and Interactives at 'FiveThirtyEight'. R package version 0.3.0. https://CRAN.R-project.org/package=fivethirtyeight\n\nHadley Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2009.\n\nHadley Wickham (2017). tidyverse: Easily Install and Load the 'Tidyverse'. R package version 1.2.1. https://CRAN.R-project.org/package=tidyverse\n\nHadley Wickham (2017). forcats: Tools for Working with Categorical Variables (Factors). R package version 0.2.0. https://CRAN.R-project.org/package=forcats\n\nJennifer Bryan (2017). gapminder: Data from Gapminder. R package version 0.3.0. https://CRAN.R-project.org/package=gapminder\n\nKamil Slowikowski (2017). ggrepel: Repulsive Text and Label Geoms for 'ggplot2'. R package version 0.7.0. https://CRAN.R-project.org/package=ggrepel\n\nMax Kuhn (2017). AmesHousing: The Ames Iowa Housing Data. R package version 0.0.3. https://CRAN.R-project.org/package=AmesHousing\n\nPeter Kampstra (2008). Beanplot: A Boxplot Alternative for Visual Comparison of Distributions, Journal of Statistical Software, 2008. https://www.jstatsoft.org/article/view/v028c01\n\nR Core Team (2017). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL https://www.R-project.org/.\n\nWinston Chang, (2014). extrafont: Tools for using fonts. R package version 0.17. https://CRAN.R-project.org/package=extrafont\n\nYihui Xie (2018). knitr: A General-Purpose Package for Dynamic Report Generation in R. R package version 1.19.\n\n```{r System Info and Package Versioning}\nsessionInfo()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"html_document":{"includes":{"in_header":"analytics.html"},"css":"styles.css","code_folding":"show","toc":true,"toc_float":true,"pandoc_args":"--tab-stop=2"}},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","include-in-header":["analytics.html"],"css":["styles.css"],"toc":true,"output-file":"graphics-guide.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}